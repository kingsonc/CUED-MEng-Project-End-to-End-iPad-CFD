C
C
C                  QUASI THREE DIMENSIONAL PROGRAM FOR
C                  BLADE TO BLADE CALCULATIONS THROUGH
C                  TURBOMACHINERY BLADE ROWS. WITH VISCOUS
C                  EFFECTS VIA A BODY FORCE MODEL.
C
C                   J D DENTON      LAST UPDATE   JAN. 1993.
C
      COMMON/BLOCK1/SFLUX(50,150),TFLUX(50,150),IM,JLEP1,NIT,IMID,ISMTH,
     1 VOL(50,150),JM,JLE,JTE,JMM1,IMM1,SF,SFH,SF1,MARK,IBLOCK,JBLOCK
     &,NLOS,NBLADE,JLEM1,JTEP1,IBBLOCK,JBBLOCK,
     & IB(50),IBB(50),JB(150),JBB(150),JSB(150)
     2/BLOCK2/ VS(50,150),WT(50,150),P(50,150),RO(50,150),R(150),X(150)
     3 ,S(150),TH(50,150),RWT(50,150),TKSS(150),YSUCT(150),GS(50,150),CP
     4 ,GT(50,150),GA,GC,TO1,PO1,P2,FGA,W,RVTABS(50,150),VTABS(50,150)
     5 ,VVS(50,150),CFP(50,150)
     & /BLOCK3/ XFORCE(50,150),TFORCE(50,150),BFORCE(50,150),REYNO,
     & FRACPS,FRACPW,POWER,FWALL,CFSUCT(150),CFPRES(150),CONLIM,DAMP
     & ,YPLUSS(150),YPLUSP(150),STEP(50,150),BSTEP(50,150)
     & ,FU(50),FD(50),FACSEC
      COMMON/BLKB/IPRINT(5),YTHICK(150),DTHETA(50,150),TKAVG(150),
     1 AS(50,150),ATT(150),ATS(50,150),ARS(50,150),DS(150),
     2 PEFF(50,150),ROVS(50,150),ROWT(50,150),RORWT(50,150),
     3 PSS(150),PST(150),SSS(150),SST(150),CORIOF(50,150),CENTF(50,150),
     4 F(50),RR(150),PIN(50),ATC(50,150),DSAVG(150),IND(150)
     5  ,GAP(150),TOREL(50),POLOS(50),FLOW(150),ITITLE(18),PERP(50,150)
      COMMON/BLKVIS/  FBLADE(50),FDOWNS(50),RATS(150),RATP(150)
     &  ,VSAVG(50),WTAVG(50),RELV(50),ROAVG(50),XSTRES(50)
     & ,TSTRES(50),AREA(50),FLAM(50),FTURB(50),FWAKE(50),VISCO,FTRANS
     & ,VLAM(50),VTURB(50),FTS(150),FTP(150),SUMF(50)
C
      DIMENSION STORE(50,150),SOLD(150),XNEW(150),RNEW(150),TKNEW(150)
C
      DIMENSION X_SLEQ(50,50),R_SLEQ(50,50),VX_SLEQ(50,50),
     &     VR_SLEQ(50,50), VT_SLEQ(50,50),VVS_SLEQ(50,50),
     &     P_SLEQ(50,50), RO_SLEQ(50,50), VM_SLEQ(50,50),
     & XLINE(150),RLINE(150),SSTHKLINE(150),SSTHK_SLEQ(50,50)
      DIMENSION X_BLADEGEN(150),YSUCT_BLADEGEN(150),YTHICK_BLADEGEN(150)
      DIMENSION CHANGE(150)
C
      REAL  M1
C
      CHARACTER*1 ANS
      CHARACTER*1 STATROT, HUBMIDTIP, CANS
C
      OPEN(UNIT = 1,FILE ='/dev/tty')
c      OPEN(UNIT = 5,FILE ='blade.dat')
cc      OPEN(UNIT = 7,FILE ='visq3d.plt')
C
C      START TO READ IN DATA



C
c      READ(5,201) (ITITLE(L),L=1,18)
  201 FORMAT(18A4)
      WRITE (6,201) (ITITLE(L),L=1,18)
c      READ(5,1) IM,JM,NBLADE,NMAX,JLE,JTE,INPUT,IREL,ISTEP,NPRINT,INFLOW
c     & ,NLOS,IRESVE,ISMTH,NH,NMIX
      IM=46
      JM=124
c      NBLADE=70
      NMAX=10000
      JLE=26
      JTE=108
      INPUT=0
      IREL=0
      ISTEP=2
      NPRINT=10
      INFLOW=0
      NLOS=5
      IRESVE=1
      ISMTH=1
      NH=200
      NMIX=5000

      OPEN(UNIT=25,FILE="visq3d_tmp/nblade.dat")
      READ(25,*)NBLADE
      CLOSE(25)

C      NBLADE=600

      WRITE(6,1)IM,JM,NBLADE,NMAX,JLE,JTE,INPUT,IREL,ISTEP,NPRINT,INFLOW
     & ,NLOS,IRESVE,ISMTH,NH,NMIX
C
C
      OPEN(UNIT=25,FILE="visq3d_tmp/visq3d_x.dat")
      DO J=1,JM
         READ(25,*)X(J)
      END DO
      CLOSE(25)
      OPEN(UNIT=25,FILE="visq3d_tmp/visq3d_ysuct.dat")
      DO J=1,JM
         READ(25,*)YSUCT(J)
      END DO
      CLOSE(25)
      OPEN(UNIT=25,FILE="visq3d_tmp/visq3d_ythick.dat")
      DO J=1,JM
         READ(25,*)YTHICK(J)
      END DO
      CLOSE(25)
C
      DO J=1,JM
         R(J)=100.
         TKSS(J)=1.
      END DO

C
C
C**************INFLOW CONTROLS THE MASS FLOW FORCING*********************
C
C      IF INFLOW = 0 NO FORCING OF MASS FLOW
C     IF INFLOW=1 THE MASS FLOW IS RELAXED TOWARDS AN INPUT VALUE
C      IF INFLOW=2 THE MASS FLOW IS RELAXED TOWARDS THE AVERAGE CALCULATED
C                              VALUE
C      IF INFLOW=3 THE MASS FLOW IS RELAXED TOWARDS THE VALUE CALCULATED FROM
C       THE INLET FLOW CONDITIONS--ESPECIALLY M1.
C
      IF(NPRINT.EQ.0)NPRINT=5
      IF(NMIX.EQ.0) NMIX=NMAX
c      READ(5,1)IBLOCK,JBLOCK,IBBLOCK,JBBLOCK,ISTART,IFCUSP,MODE
      IBLOCK=3
      JBLOCK=3
      IBBLOCK=9
      JBBLOCK=9
      ISTART=0
      IFCUSP=0
      MODE=0

      WRITE(6,4) IBLOCK,JBLOCK,IBBLOCK,JBBLOCK
    4 FORMAT('IBLOCK=',I5,'JBLOCK= ',I5,'IBBLOCK=',I5,'JBBLOCK=',I5)
C
      PI=3.14159
      PITCH=2.0*PI/NBLADE
C
C          READ IN BLADE GEOMETRICAL DATA
C          TKSS(J)= STREAM SURFACE PERPENDICULAR THICKNESS
C          YSUCT(J)= RTHETA COORDINATE OF BLADE SURFACE WITH LARGEST THETA
C          YTHICK(J)= BLADE TANGENTIAL THICKNESS DELTA RTHETA.
C

c	READ(5,2)   (X(J),J=1,JM)
        WRITE(6,40) (X(J),J=1,JM)
c	READ(5,2)   (R(J),J=1,JM)
        WRITE(6,40) (R(J),J=1,JM)
c	READ(5,2)   (TKSS(J),J=1,JM)
	WRITE(6,40) (TKSS(J),J=1,JM)
c	READ(5,2)   (YSUCT(J),J=1,JM)
	WRITE(6,40) (YSUCT(J),J=1,JM)
c	READ(5,2)   (YTHICK(J),J=1,JM)
	WRITE(6,40) (YTHICK(J),J=1,JM)
   40   FORMAT(1H ,8F10.3)
C
C
C IF INPUT=0 READ IN R * THETA, IF INPUT=1 READ IN THETA
C IF IREL=0 INLET IS SUBSONIC
C IF IREL=1 INLET IS SUPERSONIC
C
C          READ IN FLOW CONDITIONS
C
C
c      READ(5,2)    CP,GA,PO1,P2,TO1,M1,BETA1,WTIN
      CP=1005.
      GA=1.4
      PO1=100000.
c      P2=50000.
      TO1=300.
c      PO1=PO1_SLEQ
c      TO1=TO1_SLEQ
c      P2=P2_SLEQ
      P2=99000.
      M1=0.3
      BETA1=0.
C      BETA1=BETA1_SLEQ
      WTIN=0.
       WRITE(6,199) CP,GA,PO1,P2,TO1,M1,BETA1,WTIN
C
C
C            M1=RELATIVE INLET MACH NUMBER INITIAL GUESS
C            BETA1= RELATIVE INLET FLOW ANGLE FROM AXIAL IN DEGREES.
C            WTIN = RELATIVE SWIRL VELOCITY AT INLET.ONLY USED IF IREL=1.
C            P2 = FIXED DOWNSTREAM STATIC PRESSURE.
C            PO1= RELATIVE STAGNATION PRESSURE AT INLET.
C            TO1 =RELATIVE STAGNATION TEMPERATURE AT INLET.
C
C            READ IN TIME STEP FACTOR,RELAXATION FACTOR,SMOOTHING FACTORS
C            ETC.
C            W=R.P.M.
C            FT= TIME STEP FACTOR
C            RF= RELAXATION FACTOR ON PRESSURE CORRECTIONS.
C            FUP= FRACTION OF TRUE PRESSURE CORRECTION USED.
C            SFT , SFX ARE ARTIFICIAL SMOOTHING FACTORS WHICH SHOULD BE
C            KEPT AS LOW AS POSSIBLE.
C            FLOIN IS THE MASS FLOW USED IF INFLOW=1
C
C
C      READ(5,2)    FT,RF,FUP,W,SFT,SFX,RFIN,CONLIM
       FT=0.4
       RF=0.1
       FUP=0.9
       W=W_SLEQ/PI*30.
       SFT=0.01
       SFX=0.01
       RFIN=0.1
       CONLIM=0.005
      WRITE(6,199) FT,RF,FUP,W,SFT,SFX,RFIN,CONLIM
C
C
C
C         READ RELATIVE PITCHWISE SPACING OF GRID LINES F(I)
C
      IMM1=IM-1
C      READ(5,2) (F(I),I=1,IMM1)
      DO I=1,IMM1
         F(I)=1.
      END DO
      F(1)=1.2
      F(2)=15.
      F(3)=0.
C
C      FORM THE F(I) INTO A GEOMETRIC SERIES IF REQUESTED
C
      IF(F(3).GT.0.00001) GO TO 555
      FRAT = F(1)
      FMAX = F(2)
      F(1)=1.0
      DO 556 I = 2,IMM1
  556 F(I)=F(I-1)*FRAT
      DO 557 I=1,IMM1
      FREV = F(IM-I)
      IF(FREV.LT.F(I)) F(I)=FREV
      IF(F(I).GT.FMAX) F(I)=FMAX
  557 CONTINUE
C
  555 CONTINUE
C
C      READ(5,1)(IPRINT(I),I=1,5)
      DO I=1,5
         IPRINT(I)=5000
      END DO
      IF(INFLOW.NE.0) READ(5,2) RFLOW,FLOIN
      IF(INFLOW.NE.0) WRITE(6,199) RFLOW,FLOIN
C
C      IF(NLOS.NE.0)READ(5,2) REYNO,FRACPS,FRACPW,DUMMY,FWALL,DUMMY
C     &  ,DAMP,FVMIN
      REYNO=2000000.
      FRACPS=0.03
      FRACPW=0.03
      DUMMY=10.
      FWALL=1.
      DUMMY=0.
      DAMP=10.
      FVMIN=0.1
      IF(NLOS.NE.0)WRITE(6,199) REYNO,FRACPS,FRACPW,DUMMY,FWALL,DUMMY
     &  ,DAMP,FVMIN
C
      FTRANS=0.00001
      FEXT=0.25
      FACSEC=0.8
      JTRANS=50
      JTRANP=50
C      IF(NLOS.NE.0)  READ(5,*) FTRANS,FEXT,FACSEC,JTRANS,JTRANP
      IF(NLOS.NE.0) WRITE(6,*) FTRANS,FEXT,FACSEC,JTRANS,JTRANP
      IF(JTRANS.EQ.0) JTRANS = JLE
      IF(JTRANP.EQ.0) JTRANP = JLE
C
C
      NON=0
C
C      CALL NEWGRID TO INTERPOLATE IN OLD GRID AND SET UP NEW POINTS
C                     IF INPUT  =  3
C
      IF(INPUT.EQ.3) CALL NEWGRID
C
      WRITE(6,222) JLE,JTE,JM
  222 FORMAT('   JLE =',I5,'  JTE =',I5,'  JM= ',I5)
C
      IMID=IFIX(0.5*IM)
      JMM1=JM-1
      JTEP1 = JTE+1
      JLEP1=JLE+1
      JLEM1=JLE-1
C
C      SET THE DEFAULT VALUES OF SOME VARIABLES
C
      IF(NLOS.EQ.0) NLOS=1000000
      IF(RFIN.LT.0.000001) RFIN=0.25
      IF(FWALL.LT.0.000001) FWALL=1.0
      IF(CONLIM.LT.0.0000001) CONLIM=0.01
      IF(DAMP.LT.0.000001) DAMP=25.0
      IF(FVMIN.LT.0.000001) FVMIN=0.1
      IF(FEXT.LT.0.000001) FEXT = 0.5
      IF(FACSEC.LT.0.00001) FACSEC =0.8
      RFIN1=1.-RFIN
C
    1 FORMAT(16I5)
    2 FORMAT(8F10.3)
  199 FORMAT(1H0,8F15.3)
C
      SUM=0.0
      DO 991 I=1,IMM1
  991 SUM=SUM+F(I)
      DO 990 I=1,IMM1
  990 F(I)=F(I)/SUM
C
      DO 44 I=2,IMM1
      FD(I)=F(I)/(F(I)+F(I-1))
      FU(I)=F(I-1)/(F(I)+F(I-1))
   44 CONTINUE
      FD(1)= F(1)/F(2)
      FD(IM)=F(IMM1)/F(IM-2)
C
      IF (INPUT.NE.1) GO TO 5
      DO 3  J=1,JM
      YSUCT(J)=YSUCT(J)*R(J)
    3 YTHICK(J)=YTHICK(J)*R(J)
C
    5 CONTINUE
C
C
C     SET VARIOUS CONSTANTS
C
      W=2.*PI*W/60.
      BETA1=BETA1*PI/180
      BX=COS(BETA1)
      BT=TAN(BETA1)
      BS=BX*BT
      GC= CP -CP/GA
      FGA=(GA-1.0)/GA
      RCP= 1.0/CP
      CV = CP/GA
      RCV= 1.0/CV
      RPO1=1.0/PO1
      PMIN=0.1*PO1
      HOIN = CP*TO1
C
      IF(IFCUSP.EQ.0) GO TO 115
C
C      CHANGE THE CUSP GEOMETRY AT THE TRAILING EDGE IF 'IFCUSP' NOT = 0 .
C
C      SET THE MERIDIONAL DISTANCE  S(J) BASED ON THE ORIGINAL INPUT DATA.
C
      SOLD(1)=0.0
      DO 112  J=2,JM
      DES=SQRT((X(J)-X(J-1))**2 + (R(J)-R(J-1))**2)
  112 SOLD(J)=SOLD(J-1)+DES
      DO 111 J=1,JM
  111 S(J)=SOLD(J)

C       CALL CUSPIT TO FIT A CUSP TO THE BLADE IF "IFCUSP" NOT = 0 .
C
C                          WARNING !
C
C      THIS WILL CHANGE THE GRID SPACING AROUND THE TRAILING EDGE.
C
      JTESUCT=JTE-2
      JTEPRES=JTE-2
      CALL CUSPIT(JTESUCT,JTEPRES,JTE,YSUCT,YTHICK,S,CUSLEN,RFCUSP,JM)
c      write(6,*)'ok'
C
      JTEP1 = JTE + 1
C
C     INTERPOLATE TO FIND X , R and TK AT THE NEW VALUES OF S IN THE
C     TRAILING EDGE REGION AND DOWNSTREAM.
C
      JSTART = JTEPRES
      IF(JTESUCT.LT.JTEPRES) JSTART = JTESUCT
      DO 113 J = JSTART,JM
      ARG = S(J)
      IF(ARG.GT.SOLD(JM)) ARG = SOLD(JM)
      CALL INTP(JM,SOLD,X,ARG,XNEW(J))
      CALL INTP(JM,SOLD,R,ARG,RNEW(J))
      CALL INTP(JM,SOLD,TKSS,ARG,TKNEW(J))
  113 CONTINUE
      DO 114 J = JSTART,JM
      X(J)=XNEW(J)
      R(J)=RNEW(J)
      TKSS(J)=TKNEW(J)
  114 CONTINUE
C
  115 CONTINUE
C
C      SET THE MERIDIONAL DISTANCE  S(J) .
C
      S(1)=0.0
      DSMIN=100000.
      DO 11  J=2,JM
      DS(J)=SQRT((X(J)-X(J-1))**2 + (R(J)-R(J-1))**2)
      S(J)=S(J-1)+DS(J)
      IF(DS(J).LT.DSMIN) DSMIN=DS(J)
   11 CONTINUE
      DS(1) = DS(2)
C
      IF(MODE.EQ.1) THEN
C
      SDIF  = S(JTE) - S(JLE)
      RTDIF = YSUCT(JTE) - YSUCT(JLE)
      CHORD = SQRT(SDIF*SDIF + RTDIF*RTDIF)
      PCRAT = PITCH*R(JLE)/CHORD
C
  122 CONTINUE
      WRITE(1,*)
      WRITE(1,*)' THE CURRENT PITCH to CHORD RATIO IS ', PCRAT
      WRITE(1,*)' THIS IS WITH ',NBLADE, ' BLADES'
      WRITE(1,*)' DO YOU WANT TO CHANGE THE NUMBER OF BLADES ? '
      WRITE(1,*)' ANSWER "Y" or "N" '
      READ(1,123) ANS
      IF(ANS.EQ.'Y'.OR.ANS.EQ.'y') THEN
      WRITE(1,*) ' INPUT THE NEW NUMBER OF BLADES '
      READ(1,*)  NBLADE
      PCRAT = 2*PI*R(JLE)/NBLADE/CHORD
      WRITE(1,*)
      WRITE(1,*) ' THE NEW PITCH/CHORD RATIO IS ', PCRAT
      WRITE(1,*)
      GO TO 122
      ENDIF
  123 FORMAT(A1)
C
      PITCH=2.0*PI/NBLADE
C
      TKRAT = TKSS(JM)/TKSS(1)
  126 CONTINUE
      WRITE(1,*)
      WRITE(1,*)' THE CURRENT STREAM TUBE THICKNESS RATIO IS',TKRAT
      WRITE(1,*)' DO YOU WANT TO CHANGE THIS ?, ANSWER "Y" OR "N" '
      READ(1,123) ANS
      IF(ANS.EQ.'Y'.OR.ANS.EQ.'y') THEN
      WRITE(1,*)'INPUT THE NEW STREAM TUBE EXIT/INLET THICKNESS RATIO'
      READ(1,*)  TKRAT
      GO TO 126
      ENDIF
C
      JS = 4
      DO 124 J=1,JM
      IF(J.LT.JS) TKSS(J) = TKSS(1)
      IF(J.GE.JS) THEN
      TKSS(J) = TKSS(1)*(1.0 + (TKRAT-1)*(S(J)-S(JS))/(S(JM)-S(JS)) )
      ENDIF
  124 CONTINUE
C
C
C
  127 CONTINUE
      WRITE(1,*)
      WRITE(1,*)' THE CURRENT REYNOLDS NUMBER IS ', REYNO
      WRITE(1,*)' DO YOU WANT TO CHANGE THIS ?, ANSWER "Y" OR "N" '
      READ(1,123) ANS
      IF(ANS.EQ.'Y'.OR.ANS.EQ.'y') THEN
      WRITE(1,*)'INPUT THE NEW REYNOLDS NUMBER '
      READ(1,*)  REYNO
      GO TO 127
      ENDIF
C
      FRACTRAN = (S(JTRANS) - S(JLE))/(S(JTE) - S(JLE))
  128 CONTINUE
      WRITE(1,*)
      WRITE(1,*)' THE CURRENT BOUNDARY LAYER TRANSITION POINT IS AT',
     &            FRACTRAN
      WRITE(6,*)' OF THE BLADE CHORD FROM THE LEADING EDGE '
      WRITE(1,*)' DO YOU WANT TO CHANGE THIS ?, ANSWER "Y" OR "N" '
      READ(1,123) ANS
      IF(ANS.EQ.'Y'.OR.ANS.EQ.'y') THEN
      WRITE(1,*)'  INPUT THE NEW FRACTION OF CHORD FOR THE TRANSITION
     & POINT '
      READ(1,*)  FRACTRAN
      GO TO 128
      ENDIF
C
      DO 125 J=JLE,JTE
      FRAC = (S(J) - S(JLE))/(S(JTE) - S(JLE))
      IF(FRAC.GT.FRACTRAN) GO TO 234
  125 CONTINUE
C
  234 CONTINUE
      JTRANP = J-1
      JTRANP = J-1

      ENDIF
C
C
C     SET THE THETA COORDINATES OF THE GRID POINTS
C
      DO 7  J=1,JM
      FTS(J)=0.0
      FTP(J)=0.0
      IF(J.GT.JTRANS) FTS(J)=1.0
      IF(J.GT.JTRANP) FTP(J)=1.0
      IND(J)=0.0
      IF(J.GT.JLE.AND.J.LE.JTE) IND(J)=2
      RR(J)=1./R(J)
      GAP(J)=PITCH-YTHICK(J)*RR(J)
      TH(1,J)=YSUCT(J)*RR(J)
      DO 8 I=2,IM
    8 TH(I,J)=TH(I-1,J) + GAP(J)*F(I-1)
      DO 9  I=1,IMM1
    9 DTHETA(I,J)=GAP(J)*F(I)
    7 CONTINUE
C
C
      DO 12 J=2,JM
      TKAVG(J)=.5*(TKSS(J)+TKSS(J-1))
      IF(J.EQ.JM)GOTO 12
      DSAVG(J)=.5*DS(J)+.25*(DS(J+1)+DS(J-1))
   12 CONTINUE
      DSAVG(1)=DSAVG(2)
      DSAVG(JM)=DSAVG(JMM1)
      TKAVG(1)=TKAVG(2)
C
C          EVALUATE AREAS OF FACES OF THE ELEMENTS
C
      DO 13 J=1,JM
      JM1=J-1
      IF(J.EQ.1) JM1=1
      DO 14 I=1,IM
      ATT(J)=TKAVG(J)*DS(J)
      THMID=0.5*(TH(I,J)+TH(I,JM1))
   14 ATS(I,J)=TKAVG(J)*(R(J)*(TH(I,J)-THMID)-R(JM1)*(TH(I,JM1)-THMID))
      DO 17 I=1,IMM1
      AS(I,J)=TKSS(J)*R(J)*(TH(I+1,J)-TH(I,J))
      VOL(I,J)=1./(ATT(J)*0.5*(R(J)*DTHETA(I,J)+R(JM1)*DTHETA(I,JM1)))
   17 CONTINUE
   13 CONTINUE
      DO 15 I=1,IMM1
      DO 15 J=2,JMM1
      ARS(I,J)=(R(J)*DTHETA(I,J)+R(J-1)*DTHETA(I,J-1))*0.5
     1  *(TKSS(J)-TKSS(J-1))
   15 ATC(I,J)=AS(I,J)-AS(I,J-1)+ATS(I,J)-ATS(I+1,J)-ARS(I,J)
      DO 16 I=1,IM
      ATC(I,1)=ATC(I,2)
      ATS(I,1)=ATS(I,2)
      ATC(I,JM)=ATC(I,JMM1)
      ARS(I,1)=ARS(I,2)
      ARS(I,JM)=ARS(I,JMM1)
   16 TH(I,JM+1)= 2.0*TH(I,JM)-TH(I,JMM1)
C
C          SET UP INITIAL GUESS OF FLOW FIELD.
C
      P1=PO1*(1.0+(GA-1.0)*0.5*M1*M1)**(-1./FGA)
      V1REL=SQRT(CP*TO1*(GA-1.0)/(1.0+(GA-1.0)*0.5*M1*M1))*M1
      HOREL1=CP*TO1
      DPOR  =0.5*(W*W*R(1)*R(1)-V1REL*V1REL)
      TS=TO1-0.5*V1REL*V1REL/CP
      ROTH=HOREL1-0.5*W*W*R(1)*R(1)
      ROS=P1/(GC*TS)
      FLO=ROS*V1REL*BX
      DO 19 I=1,IM
      P(I,1)=P1
      PIN(I)=P1
   19 RO(I,1)=ROS
C      YSUCT(1)=V1REL
      WTIN=V1REL*BX*BT
      DO 20 J=2,JM
      P(1,J)=P1+(J-1)*(P2-P1)/JMM1
      DPOR=DPOR+(P(1,J)-P(1,J-1))/RO(1,J-1)
      A=W*W*R(J)*R(J)-2.0*DPOR
      IF(A.LT.0.0) A=1.0
      VREL=SQRT(A)
      HOREL=ROTH+0.5*W*W*R(J)*R(J)
      TS=(HOREL-0.5*VREL*VREL)/CP
      RO(1,J)=P(1,J)/(GC*TS)
C      YSUCT(J)=VREL
      DO 21 I=2,IM
      P(I,J)=P(1,J)
      PEFF(I,J)=P(I,J)
   21 RO(I,J)=RO(1,J)
   20 CONTINUE
C
      IF(ISTART.NE.0) GO TO 22
C
      DO 25 J=1,JM
      DO 26 I=1,IM
      GS(I,J)=RO(I,J)
      VS(I,J)=FLO*AS(1,1)/(AS(1,J)*RO(I,J))
      WT(I,J) = - VS(I,J) * R(J) *(TH(I,J)-TH(I,J+1))/DS(J)
      VTABS(I,J)=WT(I,J)+W*R(J)
      RVTABS(I,J)=R(J)*VTABS(I,J)
      RWT(I,J)=R(J)*WT(I,J)
      ROVS(I,J)= RO(I,J)*VS(I,J)
      ROWT(I,J)= RO(I,J)*WT(I,J)
      RORWT(I,J)=ROWT(I,J)*R(J)
      CFP(I,J) =0.0
   26 CONTINUE
   25 CONTINUE
C
       GO TO 23
C
C      READ IN RESTART FILE FROM UNIT 7 IF ISTART NOT = 0.
C
   22 WRITE(6,7005)
 7005 FORMAT( '    started from restart file ')
C
      READ(7,201) (ITITLE(L),L=1,18)
      READ(7,7000) (IDUM,I=1,9)
      READ(7,7001) DUM1,DUM2,DUM3
      DO 27 J=1,JM
   27 READ(7,7001)DUM1,DUM2,DUM3,DUM4,(STORE(I,J),I=1,IM)
      READ(7,7500) DUM1
      READ(7,7500) DUM1
      DO 7020 J=1,JM
 7020 READ(7,7100)(GS(I,J),I=1,IM)
 7100 FORMAT(10F10.0)
 7500 FORMAT(A10)
      READ(7,7500)DUM1
      DO 7030 J=1,JM
 7030 READ(7,7100)(WT(I,J),I=1,IM)
      READ(7,7500)DUM1
      DO 7040 J=1,JM
 7040 READ(7,7100)(GT(I,J),I=1,IM)
      READ(7,7500)DUM1
      DO 7050 J=1,JM
 7050 READ(7,7100)(STORE(I,J),I=1,IM)
      READ(7,7500)DUM1
      DO 7060 J=1,JM
 7060 READ(7,7100)(P(I,J),I=1,IM)
      READ(7,7500)DUM1
      DO 7070 J=1,JM
 7070 READ(7,7100)(RO(I,J),I=1,IM)
      READ(7,7500)DUM1
      DO  7080 J=1,JM
 7080 READ(7,7100)(STORE(I,J),I=1,IM)
      READ(7,7500)DUM1
      DO 7090 J=1,JM
 7090 READ(7,7100)(CFP(I,J),I=1,IM)
C
C      SET UP NEW FLOW FIELD FROM RESTART VARIABLES
C
      DO 24 I=1,IM
      PIN(I)=P(I,1)
      DO 24 J=1,JM
      VS(I,J)=SQRT(GS(I,J)*GS(I,J)+GT(I,J)*GT(I,J))*GS(I,J)/ABS(GS(I,J))
      VTABS(I,J)=WT(I,J)+W*R(J)
      RVTABS(I,J)=R(J)*VTABS(I,J)
      RWT(I,J)=R(J)*WT(I,J)
      ROVS(I,J)=RO(I,J)*VS(I,J)
      ROWT(I,J)=RO(I,J)*WT(I,J)
      RORWT(I,J)=RO(I,J)*RWT(I,J)
   24 CONTINUE
C
C
      NH=1
   23 CONTINUE
C
C      SET UP CORIOLIS and CENTRIFUGAL TERMS AND SURFACE SLOPE TERMS
C
      DO 30 J=2,JMM1
      RMID=0.5*(R(J)+R(J-1))
      DO 300 I=1,IMM1
      XFORCE(I,J)=0.0
      TFORCE(I,J)=0.0
      CENTF(I,J)=(R(J-1)-R(J))/((S(J-1)-S(J))*VOL(I,J)*RMID)
  300 CORIOF(I,J)=CENTF(I,J)*2.0*W*RMID*RMID
      A=SQRT((ATS(IM,J)+ATS(IM,J+1))**2 + (ATT(J)+ATT(J+1))**2)
      PSS(J)=(ATS(IM,J)+ATS(IM,J+1))/A
      PST(J)=(ATT(J)+ATT(J+1))/A
      A=SQRT((ATS(1,J)+ATS(1,J+1))**2+(ATT(J)+ATT(J+1))**2)
      SSS(J)=(ATS(1,J)+ATS(1,J+1))/A
   30 SST(J)=(ATT(J)+ATT(J+1))/A
C
      DO 35 J=1,JM
      CFSUCT(J)=0.0
      CFPRES(J)=0.0
      TCUSP= ABS(ATS(1,J)-ATS(IM,J))/ABS(AS(1,J))
      IF(IND(J).EQ.0.AND.TCUSP.GT.0.0001) IND(J)=1
      DO 34 I=1,IM
   34 YSUCT(I)=R(J)*TH(I,J)
C
C        PRINT OUT R*THETA COORDINATES OF GRID SET UP.
C
      IF(IPRINT(1).EQ.0) WRITE(6,36)S(J),(YSUCT(I),I=1,IM)
   35 CONTINUE
C
      IND(JTEP1) = 1
      IND(JLE)   = 1
C
   36 FORMAT(    ' S=',F8.4,' RTHETA=',(10E10.3))
C
       IF(IPRINT(1).EQ.0)CALL OUTPUT(IM,JM,NIT)
C
C      SET VOLUME FOR NON UNIFORM TIME STEPS IF REQUIRED
C      IF ISTEP=2 VARY TIME STEP (VIA VOL) IN PROPORTION TO PERP
C
C
C      SET LENGTH OF TIME STEP ,DT, BASED ON STAGNATION SPEED OF SOUND.
C
      DTT = DSMIN/SQRT(GC*GA*TO1)
      DT= DTT*FT
      DO 612 J=2,JM
      DO 612 I=1,IMM1
      DRT=(R(J)*DTHETA(I,J)+R(J-1)*DTHETA(I,J-1))*0.5
      DYB=0.5*(ATS(I,J)+ATS(I+1,J))/TKAVG(J)
      PERP(I,J)=DRT*DS(J)/SQRT(DS(J)*DS(J)+DYB*DYB)
      DMIN=DSMIN
      IF(ISTEP.EQ.1) DMIN = DSAVG(J)
      IF(ISTEP.GE.2) DMIN = AMIN1(PERP(I,J),DSAVG(J))
      STEP(I,J)=VOL(I,J)*DT*DMIN/DSMIN
      BSTEP(I,J)=STEP(I,J)
  612 CONTINUE
C
      DO 501 I=1,IM
      CENTF(I,1)=CENTF(I,2)
      CENTF(I,JM)=CENTF(I,JMM1)
      AS(I,1)=AS(I,2)
      VOL(I,1)=VOL(I,2)*DS(1)/DS(2)
      XFORCE(I,1)=0.0
      TFORCE(I,1)=0.0
      CORIOF(I,1)=CORIOF(I,2)
      CORIOF(I,JM)=CORIOF(I,JMM1)
501   CONTINUE
      WRITE(6,1)(IND(J),J=1,JM)
      RFI= 1.0 - RF
      EMAX=1.0
      IF(NH.EQ.0) NH=NMAX/4
      SFTIN=SFT
      SFXIN=SFX
      RVMIN=FVMIN*ROVS(1,1)
C

C       GEOMETRY OUTPUT FOR PLOTTING FILE
C
C      TFLUX(I,J) IS USED TO STORE R*THETA
      DO 999 I=1,IM
      DO 999 J=1,JM
  999 TFLUX(I,J) = R(J) * TH(I,J)
C
      JSPS=0
      JSPE=0
      ISPLIT=0
      JSPLIT=0
      KM=1
      REWIND 7
cc      WRITE (7,201) (ITITLE(L),L=1,18)
cc      WRITE(7,7000) IM,JM,KM,ISPLIT,JSPLIT,JLE,JTE,JSPS,JSPE
cc      WRITE(7,7001) CP,GA,W
      DO 129 J=1,JM
      PITCH=2.*PI*R(J)/NBLADE
cc      WRITE(7,7001) X(J),R(J),S(J),PITCH,(TFLUX(I,J),I=1,IM)
  129 CONTINUE
 7000 FORMAT(16I5)
 7001 FORMAT(4F10.4/(10F10.5))
C
C
C      END OF PLOTTER OUTPUT
C
C
      FLOWIN=0.0
      NIT=1
C
C      SET MULTIGRID BLOCK INDICES
C
      JMID=0.5*(JLE+JTE)
      DO 775 I=1,IMM1
      IBB(I)= 1 + (I-1)/IBBLOCK
 775  IB(I) = 1 + (I-1)/IBLOCK
      JB(1)=1
      JBB(1)=1
      DO 776 J=2,JM
      JB(J)= 1 + (J-2)/JBLOCK
      JBB(J)= 1 + (J-2)/JBBLOCK
      IF(J.LE.JLE) JSB(J)= 1
      IF(J.GT.JLE.AND.J.LE.JMID) JSB(J)=2
      IF(J.GT.JMID.AND.J.LE.JTE) JSB(J)=3
      IF(J.GT.JTE) JSB(J)=4
  776 CONTINUE
C
C
      DO 887 I=1,IMM1
  887 FLOWIN=FLOWIN+ROVS(I,1)*AS(I,1)
      IF(INFLOW.EQ.1) FLOWIN=FLOIN
C
C
C**********START OF MAIN LOOP************************************************
C
C
   50 IP=0
      DO 51 I=1,5
   51 IF(NIT.EQ.IPRINT(I)) IP=1
      IF(IP.EQ.1) WRITE(6,201)
      IF(NIT.GT.NH) GO TO 52
      SFT=0.05-0.05*NIT/NH +SFTIN
      SFX=0.05-0.05*NIT/NH +SFXIN
   52 CONTINUE
C
C
C
C          CALL LOSS1 TO UPDATE BODY FORCES EVERY NLOS ITERATIONS
C
      IF(MOD(NIT,NLOS).EQ.0) CALL LOSS1
C
C       WORK OUT MASS FLUXES AND STORE AS GS AND GT.
C
      SUMTOT=0.0
      DO 60 J=1,JM
      JM1=J-1
      FLOW(J)=0.0
      SUM=0.0
      IF(J.EQ.1)JM1=1
      DO 61 I=1,IMM1
      GS(I,J)=.5*AS(I,J)*(ROVS(I,J)+ROVS(I+1,J))
      SUM=SUM+GS(I,J)
      A=ROWT(I,J)+ROWT(I,JM1)
      E=ROVS(I,J)+ROVS(I,JM1)
   61 GT(I,J)=.5*(A*ATT(J)-E*ATS(I,J))
      GT(IM,J)=.5*(ATT(J)*(ROWT(IM,J)+ROWT(IM,JM1))
     1  -ATS(IM,J)*(ROVS(IM,J)+ROVS(IM,JM1)))
      FLOW(J)=SUM
      SUMTOT=SUMTOT+SUM
   60 CONTINUE
C
      AVFLOW=SUMTOT/JM
      IF(INFLOW.NE.2) AVFLOW=FLOWIN
C
C          MAKE FLUXES PERIODIC ON CUSPS AND SET XFLUX AND TFLUX FOR USE
C                     IN SUBROUTINE TSTEP
C
      DO 62 J= 1,JM
      IF(IND(J).NE.1) GO TO 62
      A= 0.5 * (GT(1,J)+GT(IM,J))
      GT(1,J)=A
      GT(IM,J)=A
   62 CONTINUE
      DO 63 J=JLEP1,JTE
      GT(1,J)=0.
  63  GT(IM,J)=0.
      DO 70 J=1,JM
      DO 71 I=1,IMM1
      BFORCE(I,J)=0.
      SFLUX(I,J)=GS(I,J)
71    TFLUX(I,J)=GT(I,J)
70    TFLUX(IM,J)=GT(IM,J)
C
      IF(MOD(NIT,NMIX).NE.0) GO TO 997
C
C     WRITE OUT THE SURFACE SKIN FRICTION FACTORS ETC
C
      WRITE(6,998)
  998 FORMAT('   J        RAT SUCT    RAT PRES   CF SUCT     CF PRES
     &  YPLUS S     YPLUS P  ',//)
      DO 996 J=JLE,JTE
C     RAT=FLOW(J)/FLOW(1)
  996 WRITE(6,995)J,RATS(J),RATP(J),CFSUCT(J),CFPRES(J),YPLUSS(J)
     & ,YPLUSP(J)
  995 FORMAT(1H  ,I5,6F12.4)
  997 CONTINUE
C
C     CALL MIXOUT TO OBTAIN THE DOWNSTREAM MIXED OUT CONDITIONS
C
      IF(MOD(NIT,NMIX).EQ.0) CALL MIXOUT
      RATIO=FLOW(JM)/FLOW(1)
C
C
C            CALL SUBROUTINE TSTEP TO UPDATE THE DENSITY
C
      CALL TSTEP(RO,DT,SFT,SFX)
C
C          EVALUATE NEW PRESSURES USING NEW DENSITY AND OLD VELOCITY
C
      VRMS=0.0
      DO 100 I=1,IM
      DO 101 J=2,JM
      E = 0.5*(VS(I,J)*VS(I,J) + VTABS(I,J)*VTABS(I,J))
      VRMS=VRMS+E
      HO=ROTH+W*RVTABS(I,J)
  101 P(I,J) = RO(I,J)*(HO  -E)*FGA
      DO  99 J=2,JMM1
   99 PEFF(I,J)=P(I,J+1)+CFP(I,J)
  100 CONTINUE
      PEFF(1,JLEM1) =2.*P(1,JLE)-P(1,JLE+1)
      PEFF(IM,JLEM1)=2.*P(IM,JLE)-P(IM,JLE+1)
      IF(IRESVE.EQ.3) ROVS(1,JLE)=0.001
      IF(IRESVE.EQ.3) ROVS(IM,JLE)=0.001
C
C          UPDATE CONDITIONS AT INLET BOUNDARY
C
      PEXTAV=0.0
      DO 777 I=1,IMM1
  777 PEXTAV= P(I,2) +DS(2)/DS(3)*(P(I,2)-P(I,3))  +PEXTAV
      PEXTAV=PEXTAV/IMM1
C
C
      DO 105 I=1,IM
C      PEXTLOC=2.0*P(I,2)-P(I,3)
      PEXTLOC = P(I,2) +DS(2)/DS(3)*(P(I,2)-P(I,3))
      PEXT = FEXT*PEXTAV + (1.-FEXT)*PEXTLOC
C      PEXT = P(I,2)
      PIN(I)=RFIN1*PIN(I)+RFIN*PEXT
      P(I,1)=PIN(I)
      IF(P(I,1).GT.0.9999*PO1) P(I,1)= 0.9999*PO1
      IF(P(I,1).LT.PMIN) P(I,1)=PMIN
      PEFF(I,1)=P(I,1)
      PEFF(I,JM)=P2
      TS= TO1*(P(I,1)*RPO1)**FGA
      RO(I,1)=P(I,1)/(GC*TS)
C
C      GO TO 103 IF SUPERSONIC INFLOW
C
      IF(IREL.EQ.1)GO TO 103
C
C          SUBSONIC INFLOW WITH FIXED INLET FLOW DIRECTION.
C
      VS(I,1)=SQRT(2.*CP*(TO1-TS))*BX
      WT(I,1)=VS(I,1)*BT
      VTABS(I,1)=WT(I,1)+W*R(1)
      GO TO 102
C
C          SUPERSONIC INFLOW WITH WTIN HELD CONSTANT.
C
  103 VS(I,1)=SQRT(2.*CP*(TO1-TS)-WTIN*WTIN)
      WT(I,1)=WTIN
      VTABS(I,1)=WTIN+W*R(1)
C
  102 RVTABS(I,1)=R(1)*VTABS(I,1)
C
C    UPDATE OTHER FLOW VARIABLESAT INLET BOUNDARY
C
      ROVS(I,1) = RO(I,1)*VS(I,1)
      ROWT(I,1) = RO(I,1)*WT(I,1)
      RORWT(I,1)= R(1)*ROWT(I,1)
      RWT(I,1)=   WT(I,1)*R(1)
  105 CONTINUE
C
C          RELAX MASS FLUXES TOWARDS SPECIFIED VALUE, I.E. TO AVFLOW.
C                           IF INFLOW NOT=0.
C
      IF(INFLOW.EQ.0) GO TO 992
      DO 993 J=1,JM
      DELTA=(AVFLOW/FLOW(J)-1.0)*ROVS(IMID,J)
      DO 993 I=1,IM
      RAT=1.0+ DELTA/ROVS(I,J)
      RVSN=ROVS(I,J)*RAT
      RWTN=ROWT(I,J)*RAT
      ROVS(I,J)=(1.-RFLOW)*ROVS(I,J)+RFLOW*RVSN
      ROWT(I,J)=(1.-RFLOW)*ROWT(I,J)+RFLOW*RWTN
      RORWT(I,J)= ROWT(I,J)*R(J)
  993 CONTINUE
C
C          CALCULATE FLUXES FOR STREAMWISE MOMENTUM EQUATION AND SET
C            TO XFLUX AND TFLUX.
C
  992 DO 131 J=1,JM
      JM1=J-1
      IF(J.EQ.1)JM1=1
      DO 130 I=1,IMM1
      SFLUX(I,J)=(GS(I,J)*(VS(I,J)+VS(I+1,J))+
     1  AS(I,J)*(PEFF(I,J)+PEFF(I+1,J)))*0.5
      TFLUX(I,J)=(GT(I,J)*(VS(I,J)+VS(I,JM1))-
     1  ATS(I,J)*(PEFF(I,J)+PEFF(I,JM1)))*0.5
      ROAV=0.25*(RO(I,J)+RO(I,JM1)+RO(I+1,J)+RO(I+1,JM1))
      WTABS=0.25*(VTABS(I,J)+VTABS(I,JM1)+VTABS(I+1,J)+VTABS(I+1,JM1))
      PAVG=0.25*(PEFF(I,J)+PEFF(I,JM1)+PEFF(I+1,J)+PEFF(I+1,JM1))
      FORCE=PAVG*(ATC(I,J)+ARS(I,J))+CENTF(I,J)*ROAV*WTABS*WTABS
  130 BFORCE(I,J)=-FORCE+XFORCE(I,J)
      TFLUX(IM,J)=.5*(GT(IM,J)*(VS(IM,J)+VS(IM,JM1))-
     1  ATS(IM,J)*(PEFF(IM,J)+PEFF(IM,JM1)))
131   CONTINUE
C
      AVGTE=0.25*(VS(1,JTE) + VS(1,JTEP1) + VS(IM,JTE) + VS(IM,JTEP1))
      SFLUX(1,JTEP1) = GS(1,JTEP1)*AVGTE +(PEFF(1,JTE)+PEFF(1,JTE+1))*
     & 0.5*AS(1,JTE+1)
      SFLUX(IM,JTEP1)=GS(IM,JTEP1)*AVGTE+(PEFF(IM,JTE)+PEFF(IM,JTE+1))*
     & 0.5*AS(IM,JTE+1)
C
C
C            CALL TSTEP TO UPDATE STREAMWISE MOMENTUM ROVS.
C
      CALL TSTEP(ROVS,DT,SFT,SFX)
C
C
C          CALCULATE FLUXES FOR MOMENT OF MOMENTUM EQUATION AND SET TO
C            XFLUX AND TFLUX.
C
      DO 121 J=1,JM
      JM1=J-1
      IF(J.EQ.1)JM1=1
      DO 120 I=1,IMM1
      SFLUX(I,J)=GS(I,J)*.5*(RWT(I,J)+RWT(I+1,J))
      TFLUX(I,J)=(GT(I,J)*(RWT(I,J)+RWT(I,JM1))+(PEFF(I,J)
     1  *R(J)+R(JM1)*PEFF(I,JM1))*ATT(J))*0.5
      RVSAVG=0.25*(ROVS(I,J)+ROVS(I,JM1)+ROVS(I+1,J)+ROVS(I+1,JM1))
      BFORCE(I,J)=TFORCE(I,J)+CORIOF(I,J)*RVSAVG
  120 CONTINUE
      TFLUX(IM,J)=.5*(GT(IM,J)*(RWT(IM,J)+RWT(IM,JM1))+(
     1  R(J)*PEFF(IM,J)+PEFF(IM,JM1)*R(JM1))*ATT(J))
  121 CONTINUE
C
C      MAKE TFLUXES PERIODIC FOR MOM OF MOMENTUM.
C
      DO 150 J=2,JMM1
      IF(IND(J).EQ.2) GO TO 150
      AVG=0.5*(TFLUX(1,J)+TFLUX(IM,J))
      TFLUX(1,J)=AVG
      TFLUX(IM,J)=AVG
  150 CONTINUE
C
C          CALL TSTEP TO UPDATE MOMENT OF MOMENTUM RORWT.
C
      CALL TSTEP(RORWT,DT,SFT,SFX)
C
C          RESOLVE VELOCITIES TO BE PARALLEL TO SOLID BOUNDARIES.
C
      IF(IRESVE.EQ.0) GO TO 166
      DO 160 J=JLEP1,JTE
      VSS=ROVS(1,J)*SST(J)+RORWT(1,J)*RR(J)*SSS(J)
      ROVS(1,J) = VSS* SST(J)
      ROWT(1,J) = VSS*SSS(J)
      RORWT(1,J)= ROWT(1,J)*R(J)
      VSS=ROVS(IM,J)*PST(J)+ RORWT(IM,J)*RR(J)*PSS(J)
      ROVS(IM,J) =VSS*PST(J)
      ROWT(IM,J) =VSS*PSS(J)
  160 RORWT(IM,J)= ROWT(IM,J)*R(J)
C
  166 CONTINUE
C
C          FORM VELOCITIES FROM DENSITY*VELOCITY. CHECK FOR REVERSE FLOW.
C
      DO 140 I=1,IM
      DO 141 J=2,JM
      ROS=1./RO(I,J)
      GS(I,J) = VS(I,J)
      VS(I,J) = ROVS(I,J)*ROS
      RWT(I,J)=RORWT(I,J)*ROS
      IF(ROVS(I,J).GT.0.0) GO TO 145
      IF(J.EQ.JM) GO TO 145
      A=-ROVS(I,J)/RVMIN
      IF(A.GT.1.0) A=1.0
      B=1.-A
      VS(I,J)=A*ROVS(I,J+1)/RO(I,J+1) + B*VS(I,J)
      RWT(I,J)=A*RORWT(I,J+1)/RO(I,J+1) +B*RWT(I,J)
  145 ROWT(I,J)=RORWT(I,J)*RR(J)
      WT(I,J)=RWT(I,J)*RR(J)
      VTABS(I,J)=WT(I,J)+W*R(J)
      RVTABS(I,J)=VTABS(I,J)*R(J)
  141 CONTINUE
  140 CONTINUE
C
C      ENFORCE PERIODICITY IN CASE IT WAS CHANGED BY REVERSE FLOW TREATMENT
C
      DO 666 J=1,JLEM1
      VS(1,J)=0.5*(VS(1,J)+VS(IM,J))
      VS(IM,J)=VS(1,J)
      WT(1,J)=0.5*(WT(1,J)+WT(IM,J))
      WT(IM,J)=WT(1,J)
      RWT(1,J)=0.5*(RWT(1,J)+RWT(IM,J))
      RWT(IM,J)=RWT(1,J)
      VTABS(1,J)=0.5*(VTABS(1,J)+VTABS(IM,J))
      VTABS(IM,J)=VTABS(1,J)
      RVTABS(1,J)=0.5*(RVTABS(1,J)+RVTABS(IM,J))
      RVTABS(IM,J)=RVTABS(1,J)
  666 CONTINUE
C
C          EVERY NPRINT TIME STEPS CHECK CONVERGENCE AND UPDATE
C          CORRECTION FACTOR.
C
      IF(MOD(NIT,5))170,170,180
  170 DO 171 J=2,JM
      JP2=J+2
      IF(JP2.GT.JM) JP2=JM
      JM1=JP2-3
      PROP = FUP*(S(J)-S(J+1))/(S(JP2)-S(JM1))
      DO 171 I=1,IM
      CFP(I,J)=RFI*CFP(I,J) +RF*(P(I,JP2)-P(I,JM1))*PROP
  171 CONTINUE
      EMAX=0.0
      RVREF=100./SQRT(2.*VRMS/(IM*JM))
      DO 175 I=1,IM
      DO 176 J=2,JM
      A= (VS(I,J)-GS(I,J))*RVREF
      GS(I,J) = A
      IF(ABS(A)-ABS(EMAX)) 176,176,177
  177 EMAX=A
      IMAX=I
      JMAX=J
  176 CONTINUE
  175 CONTINUE
C
C      VARY STEP WITH MACH NUMBER IF ISTEP = 3.
C
      IF(ISTEP.NE.3) GO TO 190
      DO 191 J=1,JM
      DO 191 I=1,IM
      VELSQ=VS(I,J)*VS(I,J)+WT(I,J)*WT(I,J)
      CSQ=GA*P(I,J)/RO(I,J)
  191 VVS(I,J)=SQRT(VELSQ/CSQ)
      DO 192 I=1,IMM1
      DO 192 J=2,JM
      FMULT=1.0
      AVMACH=0.25*(VVS(I,J)+VVS(I+1,J)+VVS(I,J-1)+VVS(I+1,J-1))
      AVROVS=0.25*(ROVS(I,J)+ROVS(I+1,J)+ROVS(I,J-1)+ROVS(I+1,J-1))
      IF(AVROVS.LT.RVMIN) FMULT=AVROVS/RVMIN
      IF(FMULT.LT.0.1) FMULT=0.1
  192 STEP(I,J)=0.5*(STEP(I,J)+FMULT*BSTEP(I,J)/(1.+AVMACH))
  190 CONTINUE
C
  180 IF(MOD(NIT,NPRINT).NE.0) GO TO 185
C
C      CALCULATE LOSS COEFFICIENT BASED ON EXIT DYNAMIC HEAD.
C
      DO 77 I=1,IM
      D=VS(I,JM)*VS(I,JM)+WT(I,JM)*WT(I,JM)
      TS=P(I,JM)/(GC*RO(I,JM))
      TOREL(I)=TS+0.5*D/CP
   77 POLOS(I)=P(I,JM)*(TOREL(I)/TS)**(1./FGA)
      SUMPO=0.0
      SUMTO=0.0
      SUMFLO=0.0
      DO 78 I=1,IMM1
      DFLO  = .5*AS(I,JM)*(ROVS(I,JM)+ROVS(I+1,JM))
      SUMVX = 0.5*DFLO*(VS(I,JM) + VS(I+1,JM))
      SUMWT = 0.5*DFLO*(WT(I,JM) + WT(I+1,JM))
      SUMPO = SUMPO+DFLO*0.5*(POLOS(I)+POLOS(I+1))
      SUMTO = SUMTO+DFLO*0.5*(TOREL(I)+TOREL(I+1))
   78 SUMFLO= SUMFLO+DFLO
C
      TOOUT = SUMTO/SUMFLO
      POIS  = PO1*(TOOUT/TO1)**(1./FGA)
      POOUT = SUMPO/SUMFLO
      DPO   = POIS-POOUT
      POLOCO = DPO/(POIS-P2)
      ALPHA2 = ATAN2(SUMWT,SUMVX)*180./3.14159
C
C         WRITE OUTPUT SUMMARY FOR LAST TIMESTEP
C
      WRITE(6,178) NIT,EMAX,IMAX,JMAX,FT,SFX,SFT
      WRITE(6,179) FLOW(1),RATIO,POLOCO,ALPHA2
  179 FORMAT(' INLET FLOW ',F10.3,' RATIO=',F8.5,' LOSS COEFF '
     & ,F10.5,'EXIT ANGLE',F8.3)
  178 FORMAT('0TIME STEP',I4,'EMAX=',F7.3,' AT',2I5,'FT=',F8.2,
     &  ' SFX=',F8.4,' SFT=',F8.4)
C
C
       IF(IP.EQ.1.OR.NIT.EQ.NMAX.OR.ABS(EMAX).LT.CONLIM) CALL MIXOUT
C
C
  185  CONTINUE
C
C
C      BALANCE THE PRESSURES ON THE FACES OF THE CUSP
C
c       write(6,*)'ok1'
      IF(IFCUSP.NE.0.AND.MOD(NIT,IFCUSP).EQ.0)
     & CALL CUSHIFT(CUSLEN,RFCUSP,JTESUCT,JTEPRES)
c      write(6,*)'ok2'
C
C
       IF(IP.EQ.1.OR.NIT.EQ.NMAX.OR.ABS(EMAX).LT.CONLIM) CALL OUTPUT
     &                                               (IM,JM,NIT)
C
C
      IF(NIT.GE.NMAX.OR.ABS(EMAX).LT.CONLIM) GO TO 200
C
      NIT=NIT+1
C
C          RETURN TO START OF MAIN LOOP
C
      GO TO 50
C
  200 CONTINUE
C
C     WRITE OUTPUT SUMMARY
C
      WRITE(6,*)
      IF(ABS(EMAX).LT.CONLIM) THEN
      WRITE(6,*) ' PROGRAM HAS CONVERGED IN ',NIT, ' TIMESTEPS'
      ENDIF
      WRITE(6,*)
      WRITE(6,*) ' INLET MASS FLOW IN THIS STREAMTUBE   = ', FLOW(1)
      WRITE(6,*) ' RATIO OF INLET TO OUTLET MASS FLOW   = ', RATIO
      WRITE(6,*) ' STAGNATION PRESSURE LOSS COEFFICIENT = ', POLOCO
      WRITE(6,*) ' EXIT RELATIVE FLOW ANGLE, in Degrees = ', ALPHA2
C
c      WRITE(6,*)
c      WRITE(6,*) ' THE RESULTS CAN BE PLOTTED USING THE PROGRAM "cont7"'
c      WRITE(6,*) ' TO USE THIS TYPE  "cont7" '
c      WRITE(6,*) ' WHEN ASKED FOR THE NAME OF THE PLOTTING FILE TYPE
c     &  "visq3d.plt"  .'
c      WRITE(6,*)
C
C
      STOP
      END
C******************************************************************************
C******************************************************************************
      SUBROUTINE OUTPUT(IM,JM,NIT)
      COMMON
     2/BLOCK2/ VS(50,150),WT(50,150),P(50,150),RO(50,150),R(150),X(150)
     3 ,S(150),TH(50,150),RWT(50,150),TKSS(150),YSUCT(150),GS(50,150),CP
     4 ,GT(50,150),GA,GC,TO1,PO1,P2,FGA,W,RVTABS(50,150),VTABS(50,150)
     5 ,VVS(50,150),CFP(50,150)
      DIMENSION STORE(50,150),VXTMP(50,150),VRTMP(50,150)
      JMM1=JM-1
C
C
      DO 7 J=1,JM
    7 WRITE(6,8)J,(GS(I,J),I=1,IM)
    8 FORMAT(I4,'ERROR',(T10,10F10.3))
      DO 1 J=1,JM
    1 WRITE(6,2)J,(VS(I,J),I=1,IM)
    2 FORMAT(I4,' VS',(T10,10F10.4))
      WRITE(6,20)
      DO 3 J=1,JM
    3 WRITE(6,4)J,(WT(I,J),I=1,IM)
    4 FORMAT(I4,'VTREL',(T10,10F10.4))
      WRITE(6,20)
      DO 5 J=1,JM
    5 WRITE(6,6)J,(P(I,J),I=1,IM)
    6 FORMAT(I4,' P',(T10,10F10.1))
      WRITE(6,20)
   20 FORMAT(///)
      DO 10 J=1,JM
      DO 9 I=1,IM
      D=VS(I,J)*VS(I,J)+WT(I,J)*WT(I,J)
      TS=P(I,J)/(GC*RO(I,J))
      TOREL=TS+0.5*D/CP
      GT(I,J)=P(I,J)*(TOREL/TS)**(1./FGA)
      STORE(I,J)=ATAN(WT(I,J)/VS(I,J)) *180./3.14159
    9 VVS(I,J)=SQRT(D/(GA*GC*TS))
   10 CONTINUE
      WRITE(6,20)
      DO 11 J=1,JM
   11 WRITE(6,12)J,(VVS(I,J),I=1,IM)
   12 FORMAT(I4,' MACH',(T10,10F10.3))
      WRITE(6,20)
      DO 13 J=1,JM
   13 WRITE(6,14)J,(GT(I,J),I=1,IM)
   14 FORMAT(I4,' PO',(T10,10F10.1))
      WRITE(6,20)
      DO 22 J=1,JM
   22 WRITE(6,21)J,(STORE(I,J),I=1,IM)
   21 FORMAT(I4,'ANGLE',(T10,10F10.3))
C
C        PLOTTING OUT ALSO USED FOR RESTART FILEPUT
C
C      SET VX TO STORE
C
      DO 110 I=1,IM
      DO 100 J=2,JMM1
  100 STORE(I,J)=VS(I,J)*(X(J+1)-X(J-1))/(S(J+1)-S(J-1))
      STORE(I,1)=VS(I,1)*(X(2)-X(1))/(S(2)-S(1))
      STORE(I,JM)=VS(I,JM)*(X(JM)-X(JMM1))/(S(JM)-S(JMM1))
  110 CONTINUE

      DO J=1,JM
         DO I=1,IM
            VXTMP(I,J)=STORE(I,J)
         END DO
      END DO

cc      WRITE(7,7010)NIT
cc      WRITE(7,7002)
cc      DO 2000 J=1,JM
cc 2000 WRITE(7,7003)(STORE(I,J),I=1,IM)
cc      WRITE(7,7004)
cc      DO 2010 J=1,JM
cc 2010 WRITE(7,7003)(WT(I,J),I=1,IM)
C
C      SET VR TO STORE
C
      DO 120 I=1,IM
      DO 130 J=2,JMM1
  130 STORE(I,J)=VS(I,J)*(R(J+1)-R(J-1))/(S(J+1)-S(J-1))
      STORE(I,1)=VS(I,1)*(R(2)-R(1))/(S(2)-S(1))
      STORE(I,JM)=VS(I,JM)*(R(JM)-R(JMM1))/(S(JM)-S(JMM1))
  120 CONTINUE
      DO J=1,JM
         DO I=1,IM
            VRTMP(I,J)=STORE(I,J)
         END DO
      END DO

cc      WRITE(7,7015)
cc      DO 2020 J=1,JM
cc 2020 WRITE(7,7003)(STORE(I,J),I=1,IM)
cc      WRITE(7,7007)
cc      DO 2030 J=1,JM
cc 2030 WRITE(7,7011)(VVS(I,J),I=1,IM)
cc      WRITE(7,7005)
cc      DO 2040 J=1,JM
cc 2040 WRITE(7,7006)(P(I,J),I=1,IM)
cc      WRITE(7,7008)
cc      DO 2050 J=1,JM
cc 2050 WRITE(7,7011)(RO(I,J),I=1,IM)
cc      WRITE(7,7014)
cc      DO 2060 J=1,JM
cc 2060 WRITE(7,7006)(GT(I,J),I=1,IM)
cc      WRITE(7,7016)
cc      DO 2070 J=1,JM
cc 2070 WRITE(7,7006)(CFP(I,J),I=1,IM)

      OPEN(UNIT=25,FILE="visq3d_tmp/visq3d.out")
      DO J=1,JM
         DO I=1,IM
            WRITE(25,*)X(J),R(J)*TH(I,J),R(J),TKSS(J),P(I,J),RO(I,J),
     &    VXTMP(I,J),VRTMP(I,J),WT(I,J)
         END DO
      END DO
      CLOSE(25)


C
C
7002  FORMAT(' AXIAL VELOCITY')
7003  FORMAT(10F10.4)
7004  FORMAT('TANGENTIAL VELOCITY ')
7005  FORMAT('  STATIC PRESSURE   ')
7006  FORMAT(10F10.1)
7007  FORMAT('    MACH NUMBER     ')
7008  FORMAT(' DENSITY  ')
7010  FORMAT('TIME STEP NO.',I6)
7011  FORMAT(10F10.7)
7014  FORMAT(' RELATIVE STAGNATION P.')
7015  FORMAT( '  VR ')
7016  FORMAT('  CORRECTION FACTOR ')
      RETURN
      END
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
      SUBROUTINE TSTEP(D,DT,SFT,SFX)
      DIMENSION D(50,150),CHANGE(50,150),AVG(150),CURVE(150),SCURVE(150)
      COMMON/BLOCK1/SFLUX(50,150),TFLUX(50,150),IM,JLEP1,NIT,IMID,ISMTH,
     & VOL(50,150),JM,JLE,JTE,JMM1,IMM1,SF,SFH,SF1,MARK,IBLOCK,JBLOCK
     &,NLOS,NBLADE,JLEM1,JTEP1,IBBLOCK,JBBLOCK,
     & IB(50),IBB(50),JB(150),JBB(150),JSB(150)
     & /BLOCK3/ XFORCE(50,150),TFORCE(50,150),BFORCE(50,150),REYNO,
     & FRACPS,FRACPW,POWER,FWALL,CFSUCT(150),CFPRES(150),CONLIM,DAMP
     & ,YPLUSS(150),YPLUSP(150),STEP(50,150),BSTEP(50,150)
     & ,FU(50),FD(50),FACSEC
C
      DIMENSION  BCHG(25,75),BBCHG(15,40),SBCHG(4)
C
      SFX1=1.-SFX
      SFT1=1.-SFT
      SFXH=0.5*SFX
      SFTH=0.5*SFT
      FAC1 = 0.5/JBLOCK
      FAC2 = 0.2/JBBLOCK
      FAC3 = 0.1/JM

C
C      SET BLOCK CHANGES TO ZERO
C
      DO 390 J=1,JB(JM)
      DO 390 I=1,IB(IMM1)
  390 BCHG(I,J)=0.0
      DO 395 J=1,JBB(JM)
      DO 395 I=1,IBB(IMM1)
  395 BBCHG(I,J)=0.0
      DO 385 J=1,4
  385 SBCHG(J)=0.0
C
      IF(SFX.LT.0.0001) GO TO 6
C
C         SMOOTH AXIALLY IF REQUIRED
C
      DO 4000 I=1,IM
      DO 3990 J=2,JMM1
      AVG(J)=D(I,J+1)+D(I,J-1)
 3990 CURVE(J)=D(I,J)-AVG(J)*0.5
      CURVE(1)=0.0
      CURVE(JM)=0.0
      DO 3995 J=2,JMM1
 3995 CHANGE(I,J)=SFX1*D(I,J)+SFXH*(AVG(J)+CURVE(J+1)+CURVE(J-1))
 4000 CONTINUE
C
C      SPECIAL SMOOTHING AROUND THE LEADING EDGE
C
      J1=JLE-4
      J2=JLE-1
      CHANGE(1,JLE)=(1.-2.*SFX)*D(1,JLE)+SFX*(D(1,JLE+1)+D(IM,JLE))
      CHANGE(IM,JLE)=(1.-2.*SFX)*D(IM,JLE)+SFX*(D(IM,JLE+1)+D(1,JLE))
      DO 4010 J=J1,J2
      CHANGE(1,J)=D(1,J)
      CHANGE(IM,J)=D(IM,J)
      CHANGE(2,J)=D(2,J)
      CHANGE(3,J)=D(3,J)
      CHANGE(IMM1,J)=D(IMM1,J)
      CHANGE(IM-2,J)=D(IM-2,J)
 4010 CONTINUE
      CHANGE(1,JLE+1)=SFX1*D(1,JLE+1)+SFXH*(D(1,JLE)+D(1,JLE+2))
      CHANGE(IM,JLE+1)=SFX1*D(IM,JLE+1)+SFXH*(D(IM,JLE)+D(IM,JLE+2))
C
C     SET THE NEW SMOOTHED VALUES OF THE VARIABLE D
C
      DO 4020 J=2,JMM1
      DO 4020 I=1,IM
 4020 D(I,J)=CHANGE(I,J)
C
C         SUM FLUXES TO FORM CHANGE IN VARIABLE D
C
    6 SUMCHG=0.0
      DO 10 J=2,JM
      DO 10 I=1,IMM1
      DELTA=(SFLUX(I,J-1)-SFLUX(I,J)+TFLUX(I,J)-
     1  TFLUX(I+1,J)-BFORCE(I,J))*STEP(I,J)
      SUMCHG=SUMCHG+ABS(DELTA)
   10 CHANGE(I,J)=DELTA
C
C      APPLY NEGATIVE FEEDBACK
C
      AVGCHG=DAMP*SUMCHG/(IMM1*JMM1)
      DO 20 J=2,JM
      DO 20 I=1,IMM1
      DELTA=CHANGE(I,J)
      ABSCHG=ABS(DELTA)
      CHANGE(I,J)=DELTA/(1.+ ABSCHG/AVGCHG)
   20 CONTINUE
C
C          SUM CHANGES FOR THE MULTIGRID BLOCKS
C                   IF REQUIRED.
C
      IF(IBLOCK.EQ.0.AND.JBLOCK.EQ.0) GOTO 500
C
      DO 400 I=1,IMM1
      IBL=IB(I)
      IBBL=IBB(I)
      DO 410 J=2,JM
      JSBL=JSB(J)
      JBL= JB(J)
      JBBL=JBB(J)
      VAL= CHANGE(I,J)
      SBCHG(JSBL)=SBCHG(JSBL) + VAL
      BBCHG(IBBL,JBBL) = BBCHG(IBBL,JBBL) + VAL
  410 BCHG(IBL,JBL)=BCHG(IBL,JBL) + VAL
  400 CONTINUE
      DO 430 I=1,IMM1
      IBL= IB(I)
      IBBL=IBB(I)
      DO 420 J=2,JM
      JBL = JB(J)
      JSBL= JSB(J)
      JBBL= JBB(J)
  420 CHANGE(I,J)=CHANGE(I,J)+BCHG(IBL,JBL)*FAC1
     &  + BBCHG(IBBL,JBBL)*FAC2
     &  + SBCHG(JSBL)*FAC3
  430 CONTINUE
C
  500 CONTINUE
C
C             END OF MULTIGRID SECTION
C
C
C             SMOOTH THE VARIABLE D
C
       IF(ISMTH.EQ.0) GO TO 66
C
C           USE LINEAR SMOOTHING IF ISMTH=1
C
      DO 55 J=JLE,JTE
      DO 50 I=2,IMM1
 50   D(I,J)=SFT1*D(I,J)+SFTH*(D(I+1,J)+D(I-1,J))
      D(1,J)=D(1,J)+SFT*(2.*D(2,J)-D(3,J)-D(1,J))
 55   D(IM,J)=D(IM,J)+SFT*(2.*D(IMM1,J)-D(IM-2,J)-D(IM,J))
      DO 56 J=2,JLEM1
      DO 57 I=2,IMM1
   57 D(I,J)=SFT1*D(I,J)+SFTH*(D(I+1,J)+D(I-1,J))
      D(1,J)=SFT1*D(1,J) + SFTH*(D(2,J)+D(IMM1,J))
   56 D(IM,J)=SFT1*D(IM,J) +SFTH*(D(2,J)+D(IMM1,J))
      DO 58 J=JTEP1,JM
      DO 59 I=2,IMM1
   59 D(I,J)=SFT1*D(I,J)+SFTH*(D(I+1,J)+D(I-1,J))
      D(1,J)=SFT1*D(1,J) + SFTH*(D(2,J)+D(IMM1,J))
   58 D(IM,J)=SFT1*D(IM,J) +SFTH*(D(2,J)+D(IMM1,J))
C
      GO TO 67
C
C
C      APPLY NON LINEAR SMOOTHING IN THE TANGENTIAL DIRECTION
C      IF ISMTH=0. FACSEC IS THE PROPORTION OF FOURTH ORDER SMOOTHING
C      THAT IS USED.
C
   66 CONTINUE
C
      DO 8 J=2,JM
      DO 7 I=2,IMM1
      AVG(I)= FU(I)*D(I+1,J) +FD(I)*D(I-1,J)
    7 CURVE(I)= D(I,J)-AVG(I)
      AVG(1)= D(2,J) +FD(1)*(D(2,J)-D(3,J))
      AVG(IM)= D(IMM1,J) +FD(IM)*(D(IMM1,J)-D(IM-2,J))
C      CURVE(1)=0.5*(CURVE(2)+CURVE(3))
C      CURVE(IM)=0.5*(CURVE(IMM1)+CURVE(IM-2))
      CURVE(1)=0.0
      CURVE(IM)=0.0
      DO 11 I=2,IMM1
   11 SCURVE(I)= FU(I)*CURVE(I+1) +FD(I)*CURVE(I-1)
C      SCURVE(1)=-2.0*SCURVE(2)
C      SCURVE(IM)=-2.0*SCURVE(IMM1)
      SCURVE(1)=0.0
      SCURVE(IM)=0.0
      DO 12 I=1,IM
   12 D(I,J)=SFT1*D(I,J)+SFT*(AVG(I)+FACSEC*SCURVE(I))
    8 CONTINUE
C
C           ADD THE CHANGE TO TO OLD VALUE OF THE VARIABLE
C
   67 CONTINUE
C
      DO 76 J=2,JM
      DO 77 I=2,IMM1
   77 D(I,J)=D(I,J)+0.5*(CHANGE(I-1,J)+CHANGE(I,J))
      D(1,J)=D(1,J)+CHANGE(1,J)
   76 D(IM,J)=D(IM,J)+CHANGE(IMM1,J)
C
C        APPLY THE PERIODICITY CONDITION UPSTREAM AND DOWNSTREAM OF THE
C                           BLADE ROW
C
      DO 60 J=1,JLEM1
      D(1,J)=.5*(D(1,J)+D(IM,J))
   60 D(IM,J)=D(1,J)
      DO 65 J=JTEP1,JM
      D(1,J)=.5*(D(1,J)+D(IM,J))
   65 D(IM,J)=D(1,J)
      RETURN
      END
C*****************************************************************************
C*****************************************************************************
C
      SUBROUTINE INTP(N,XN,YN,X,Y)
C
C  INTERPOLATION SUBROUTINE.
C  FITS A CUBIC THROUGH NEAREST FOUR POINTS
C
      DIMENSION XN(N),YN(N)
      Y=0.
      L=1
      IF(X.GT.0.99999*XN(N)) XN(N)=X*1.0001
      NM=N
      IF(N.LT.4) GO TO 8
      NM=4
    4 IF(X.LT.XN(L)) GO TO 5
      L=L+1
      GO TO 4
    5 IF(L.GT.2) GO TO 6
      L=1
      GO TO 8
    6 IF(L.NE.N) GO TO 7
      L=N-3
      GO TO 8
    7 L=L-2
    8 DO 11 L1=1,NM
      CO=1.
      DO 10 L2=1,NM
      IF(L1.EQ.L2) GO TO 9
      TEMP=(X-XN(L+L2-1))/(XN(L+L1-1)-XN(L+L2-1))
      GO TO 10
    9 TEMP=1.
   10 CO=CO*TEMP
   11 Y=Y+CO*YN(L+L1-1)
      RETURN
      END
C
C******************************************************************************
C
      SUBROUTINE NEWGRID
      COMMON/BLOCK1/SFLUX(50,150),TFLUX(50,150),IM,JLEP1,NIT,IMID,ISMTH,
     1 VOL(50,150),JM,JLE,JTE,JMM1,IMM1,SF,SFH,SF1,MARK,IBLOCK,JBLOCK
     &,NLOS,NBLADE,JLEM1,JTEP1,IBBLOCK,JBBLOCK,
     & IB(50),IBB(50),JB(150),JBB(150),JSB(150)
     2/BLOCK2/ VS(50,150),WT(50,150),P(50,150),RO(50,150),R(150),X(150)
     3 ,S(150),TH(50,150),RWT(50,150),TKSS(150),YSUCT(150),GS(50,150),CP
     4 ,GT(50,150),GA,GC,TO1,PO1,P2,FGA,W,RVTABS(50,150),VTABS(50,150)
     5 ,VVS(50,150),CFP(50,150)
     & /BLOCK3/ XFORCE(50,150),TFORCE(50,150),BFORCE(50,150),REYNO,
     & FRACPS,FRACPW,POWER,FWALL,CFSUCT(150),CFPRES(150),CONLIM,DAMP
     & ,YPLUSS(150),YPLUSP(150),STEP(50,150),BSTEP(50,150)
     & ,FU(50),FD(50),FACSEC
      COMMON/BLKB/IPRINT(5),YTHICK(150),DTHETA(50,150),TKAVG(150),
     1 AS(50,150),ATT(150),ATS(50,150),ARS(50,150),DS(150),
     2 PEFF(50,150),ROVS(50,150),ROWT(50,150),RORWT(50,150)
     3,PSS(150),PST(150),SSS(150),SST(150),CORIOF(50,150),CENTF(50,150),
     4 F(50),RR(150),PIN(50),ATC(50,150),DSAVG(150),IND(150)
     5  ,GAP(150),TOREL(50),POLOS(50),FLOW(150),ITITLE(18),PERP(50,150)
      DIMENSION UPF(150),ONF(150),DOWNF(150),SOLD(150),SNEW(150),
     & XBUF(150),YBUF(150)
      READ(5,1000)NUP,NON,NDOWN
 1000 FORMAT(16I5)
      WRITE(6,1600)NUP,NON,NDOWN
 1600 FORMAT(1H ,' NUP,NON,NDOWN',3I10)
C
C
C      NUP IS NUMBER OF UPSTREAM POINTS INCLUDING THE L.E. POINT
C      I.E. IT IS THE NUMBER OF UPSTREAM ELEMENTS + 1.
C      NON IS NUMBER OF POINTS ON BLADE INCLUDING THE T.E. POINT BUT NOT
C      THE L.E. POINT. IT = THE NUMBER OF ELEMENTS ON THE BLADE.
C      NDOWN IS THE NUMBER OF POINTS DOWNSTREAM NOT INCLUDING THE T.E. POINT
C      IT = THE NUMBER OF ELEMENTS DOWNSTREAM OF THE BLADE.
C
C      THE RELATIVE SPACINGS ARE ALL ORDERED IN THE DIRECTION OF
C      INCREASING J. I.E. UPF(1) WILL TEND TO BE LARGE AND UPF(NUP)
C      WILL TEND TO BE SMALL.
C
C       UPF(NUP) IS NOT USED AS THERE ARE NUP-1 INTERVALS BETWEEN NUP POINTS
C
      READ(5,1702)(UPF(J),J=1,NUP)
      READ(5,1702)(ONF(J),J=1,NON)
      READ(5,1702)(DOWNF(J),J=1,NDOWN)
      WRITE(6,1704)(UPF(J),J=1,NUP)
      WRITE(6,1704)(ONF(J),J=1,NON)
      WRITE(6,1704)(DOWNF(J),J=1,NDOWN)
1702  FORMAT(16F5.2)
1704  FORMAT(1H ,12F5.2)
C
C     CALCULATE S COORDS. AND PUT IN ARRAY SOLD
C
      SOLD(1)=0
      DO 601 J=2,JM
C
      SOLD(J)=SOLD(J-1)+SQRT((R(J)-R(J-1))**2+(X(J)
     *-X(J-1))**2)
C
601   CONTINUE
C
C      USE SNEW TO STORE S-COORDS OF NEW GRID LINES
C
C     FIRST CALCULATE UPTOT,ONTOT, AND DOWNTOT:
C
      UPTOT=0
      DO 605 J=1,NUP-1
      UPTOT=UPTOT+UPF(J)
605   CONTINUE
C
      ONTOT=0
      DO 607 J=1,NON
      ONTOT=ONTOT+ONF(J)
607   CONTINUE
C
      DOWNTOT=0
      DO 609 J=1,NDOWN
      DOWNTOT=DOWNTOT+DOWNF(J)
609   CONTINUE
C
C
      SNEW(1)=0.0
      DO 610 J=2,NUP
      SNEW(J)=SNEW(J-1)+UPF(J-1)/UPTOT*SOLD(JLE)
610   CONTINUE
C
      DO 620 J=NUP+1,NUP+NON
      SNEW(J)=SNEW(J-1)+ONF(J-NUP)/ONTOT*(SOLD(JTE)-SOLD(JLE))
620   CONTINUE
C
      DO 625 J=NUP+NON+1,NUP+NON+NDOWN
      SNEW(J)=SNEW(J-1)+DOWNF(J-NUP-NON)/DOWNTOT*(SOLD(JM)
     *-SOLD(JTE))
625   CONTINUE
C
CC
C     NOW FIND X,R,YSUCT..,THICK.. USING 4 POINT INTERPOLATION
C
      JMNEW=NUP+NON+NDOWN
C
C
C
C     SET UP BUFFERS XBUF AND YBUF TO CONTAIN SOLD, AND DX:
C
      DO 632 JJ=1,JM
      XBUF(JJ)=SOLD(JJ)
      YBUF(JJ)=X(JJ)
632   CONTINUE
C
C     FIND INTERPOLATED X-VALS, AND PUT THEM IN DX:
C
      DO 634 J=1,JMNEW
      CALL INTP(JM,XBUF,YBUF,SNEW(J),X(J))
634   CONTINUE
C
C     FIND NEW R:
C
      DO 636 JJ=1,JM
      YBUF(JJ)=R(JJ)
636   CONTINUE
C
      DO 638 J=1,JMNEW
      CALL INTP(JM,XBUF,YBUF,SNEW(J),R(J))
638   CONTINUE
C
C
C     NOW YSUCT..  :
C
      DO 640 JJ=1,JM
      YBUF(JJ)=YSUCT(JJ)
640   CONTINUE
C
      DO 642 J=1,JMNEW
      CALL INTP(JM,XBUF,YBUF,SNEW(J),YSUCT(J))
642   CONTINUE
C
C     NOW THICKNESS...
C
      DO 644 JJ=1,JM
      YBUF(JJ)=TKSS(JJ)
644   CONTINUE
C
      DO 646 J=1,JMNEW
      CALL INTP(JM,XBUF,YBUF,SNEW(J),TKSS(J))
646   CONTINUE
C
C
C     NOW  THICKNESS...
C
      DO 648 JJ=1,JM
      YBUF(JJ)=YTHICK(JJ)
648   CONTINUE
C
      DO 649 J=1,JMNEW
      CALL INTP(JM,XBUF,YBUF,SNEW(J),YTHICK(J))
      IF(J.LT.NUP) YTHICK(J)=0.0
      IF(J.GT.(NUP+NON)) YTHICK(J)=0.0
649   CONTINUE
C
C
      JMOLD=JM
      JM=JMNEW
      JLE=NUP
      JTE=NUP+NON
C
      WRITE(6,997)
  997 FORMAT('         J     X            Y           R         YTHICK
     &  TK ')
      DO 999 J=1,JM
  999 WRITE(6,998) J,X(J),YSUCT(J),R(J),YTHICK(J),TKSS(J)
  998 FORMAT( I10,5F12.3)
      RETURN
      END
C
C*****************************************************************************
C
      SUBROUTINE MIXOUT
      COMMON/BLOCK1/SFLUX(50,150),TFLUX(50,150),IM,JLEP1,NIT,IMID,ISMTH,
     1 VOL(50,150),JM,JLE,JTE,JMM1,IMM1,SF,SFH,SF1,MARK,IBLOCK,JBLOCK
     & ,NLOS,NBLADE,JLEM1,JTEP1,IBBLOCK,JBBLOCK,
     & IB(50),IBB(50),JB(150),JBB(150),JSB(150)
     2/BLOCK2/ VS(50,150),WT(50,150),P(50,150),RO(50,150),R(150),X(150)
     3 ,S(150),TH(50,150),RWT(50,150),TKSS(150),YSUCT(150),GS(50,150),CP
     4 ,GT(50,150),GA,GC,TO1,PO1,P2,FGA,W,RVTABS(50,150),VTABS(50,150)
     5 ,VVS(50,150),CFP(50,150)
     & /BLOCK3/ XFORCE(50,150),TFORCE(50,150),BFORCE(50,150),REYNO,
     & FRACPS,FRACPW,POWER,FWALL,CFSUCT(150),CFPRES(150),CONLIM,DAMP
     & ,YPLUSS(150),YPLUSP(150),STEP(50,150),BSTEP(50,150)
     & ,FU(50),FD(50),FACSEC
      COMMON/BLKB/IPRINT(5),YTHICK(150),DTHETA(50,150),TKAVG(150),
     1 AS(50,150),ATT(150),ATS(50,150),ARS(50,150),DS(150),
     2 PEFF(50,150),ROVS(50,150),ROWT(50,150),RORWT(50,150)
     3,PSS(150),PST(150),SSS(150),SST(150),CORIOF(50,150),CENTF(50,150),
     4 F(50),RR(150),PIN(50),ATC(50,150),DSAVG(150),IND(150)
     5  ,GAP(150),TOREL(50),POLOS(50),FLOW(150),ITITLE(18),PERP(50,150)
      WRITE(6,500)
  500 FORMAT(// ' RESULTS OF MIXING CALCULATION AT LOCAL FLOW AREA ',/)
      DO 888 J=1,JM
      DO 77 I=1,IM
      D=VS(I,J)*VS(I,J)+WT(I,J)*WT(I,J)
      TS=P(I,J)/(GC*RO(I,J))
      TOREL(I)=TS+0.5*D/CP
      IF(TS.LT.0.01*TO1) TS=0.01*TO1
   77 POLOS(I)=P(I,J)*(TOREL(I)/TS)**(1./FGA)
      SUMPO=0.0
      SUMTO=0.0
      SUMVS=0.0
      SUMWT=0.0
      SUMRO=0.0
      SUMPS=0.0
      SUMFLO=0.0
      DO 78 I=1,IMM1
      DFLO=.5*F(I)*(ROVS(I,J)+ROVS(I+1,J))
      SUMPO=SUMPO+DFLO*0.5*(POLOS(I)+POLOS(I+1))
      SUMTO=SUMTO+DFLO*0.5*(TOREL(I)+TOREL(I+1))
      SUMVS=SUMVS+DFLO*0.5*(VS(I,J)+VS(I+1,J))
      SUMWT=SUMWT+DFLO*0.5*(WT(I,J)+WT(I+1,J))
      SUMPS=SUMPS+0.5*F(I)*(P(I,J)+P(I+1,J))
      SUMRO=SUMRO+0.5*F(I)*(RO(I,J)+RO(I+1,J))
   78 SUMFLO=SUMFLO+DFLO
C
C
      TOAVG=SUMTO/SUMFLO
      POIS=PO1*(TOAVG/TO1)**(1./FGA)
      POAVG=SUMPO/SUMFLO
      VSAVG=SUMVS/SUMFLO
      WTMIX=SUMWT/SUMFLO
      DPO=POIS-POAVG
      POLOCO=DPO/(POIS-SUMPS)
      PSAVG=SUMPS
      ROMIX=SUMRO
      NLOOP=0
   50 CONTINUE
      NLOOP=NLOOP+1
      VSMIX=SUMFLO/ROMIX
      PMIX=PSAVG + SUMFLO*(VSAVG - VSMIX)
      TMIX=TOAVG -0.5*(VSMIX*VSMIX + WTMIX*WTMIX)/CP
      IF(TMIX.LT.0.01*TO1) TMIX=0.01*TO1
      RNEW=PMIX/(GC*TMIX)
      DRO=ABS((RNEW-ROMIX)/RNEW)
      ROMIX=RNEW
      IF(NLOOP.GT.10) GO TO 60
      IF(DRO.GT.0.001) GO TO 50
   60 POMIX=PMIX*(TOAVG/TMIX)**(1.0/FGA)
C      WRITE(6,200) J,NLOOP,PMIX,POIS,POAVG,POMIX
C  200 FORMAT(2I5,' PAVG =',F10.1, ' POIS = ',F10.1, 'PO AVG',F10.1,
C     &  'PO MIX',F10.1)
      ALPHA=WTMIX/VSMIX
      ALPHA=ATAN(ALPHA)* 180./3.14159
      TIS=TO1*(PMIX/PO1)**FGA
      ZETA= (TMIX-TIS)/(TO1-TIS)
  888 CONTINUE
C
      PLOSCO=(POIS-POMIX)/(POMIX-PMIX)
      WRITE(6,300) PLOSCO
  300 FORMAT(' mixed out stagnation press loss coeff,(Pois-Pomix)/
     & (Pomix-Pmix)',F10.5)
      PLOSCO=(POIS-POMIX)/(POIS-PMIX)
      WRITE(6,400) PLOSCO
  400 FORMAT(' Mixed out Stagnation Press loss coeff, (Pois-Pomix)/
     & (Pois-Pmix)',F10.5)
C
      WRITE(6,600) ZETA,ALPHA
  600 FORMAT( ' ENERGY LOSS COEFF = ', F10.5,' EXIT ANGLE=',F10.5)
C
      RETURN
      END

C******************************************************************************
C******************************************************************************
      SUBROUTINE LOSS1
C
C************THIS SUBROUTINE COMPUTES A BODY FORCE BASED ON A *************
C************SURFACE SHEAR STRESS AND DISTRIBUTES IT OVER THE FLOW*********
C************FIELD ASSUMING A MIXING LENGTH MODEL OF EDDY VISCOSITY******
C            A SIMPLE BOUNDARY LAYER TRANSITION MODEL IS ALSO INCLUDED
C
C
      COMMON/BLOCK1/SFLUX(50,150),TFLUX(50,150),IM,JLEP1,NIT,IMID,ISMTH,
     1 VOL(50,150),JM,JLE,JTE,JMM1,IMM1,SF,SFH,SF1,MARK,IBLOCK,JBLOCK
     &,NLOS,NBLADE,JLEM1,JTEP1,IBBLOCK,JBBLOCK,
     & IB(50),IBB(50),JB(150),JBB(150),JSB(150)
     2/BLOCK2/ VS(50,150),WT(50,150),P(50,150),RO(50,150),R(150),X(150)
     3 ,S(150),TH(50,150),RWT(50,150),TKSS(150),YSUCT(150),GS(50,150),CP
     4 ,GT(50,150),GA,GC,TO1,PO1,P2,FGA,W,RVTABS(50,150),VTABS(50,150)
     5 ,VVS(50,150),CFP(50,150)
     & /BLOCK3/ XFORCE(50,150),TFORCE(50,150),BFORCE(50,150),REYNO,
     & FRACPS,FRACPW,POWER,FWALL,CFSUCT(150),CFPRES(150),CONLIM,DAMP
     & ,YPLUSS(150),YPLUSP(150),STEP(50,150),BSTEP(50,150)
     & ,FU(50),FD(50),FACSEC
      COMMON/BLKB/ IPRINT(5),YTHICK(150),DTHETA(50,150),TKAVG(150),
     1 AS(50,150),ATT(150),ATS(50,150),ARS(50,150),DS(150),
     2 PEFF(50,150),ROVS(50,150),ROWT(50,150),RORWT(50,150)
     3,PSS(150),PST(150),SSS(150),SST(150),CORIOF(50,150),CENTF(50,150),
     4 F(50),RR(150),PIN(50),ATC(50,150),DSAVG(150),IND(150)
     5  ,GAP(150),TOREL(50),POLOS(50),FLOW(150),ITITLE(18),PERP(50,150)
C
      COMMON/BLKVIS/  FBLADE(50),FDOWNS(50),RATS(150),RATP(150)
     &  ,VSAVG(50),WTAVG(50),RELV(50),ROAVG(50),XSTRES(50)
     & ,TSTRES(50),AREA(50),FLAM(50),FTURB(50),FWAKE(50),VISCO,FTRANS
     & ,VLAM(50),VTURB(50),FTS(150),FTP(150),SUMF(50)
C
C
C      CALCULATE THE LAMINAR VISCOSITY BASED ON THE INPUT REYNOLDS NO.
C      FOR THE FIRST 100 STEPS THEN HOLD CONSTANT.
C
      IF(NIT.GT.100) GO TO 99
      J1=JLE
      J2=JTE
      IF(JLE.GT.JM) J1=1
      IF(JTE.GT.JM) J2=JM
      XCHORD=S(J2)-S(J1)
      WTHETA=ROWT(IMID,JM)
      ROW2=SQRT(ROVS(IMID,JM)*ROVS(IMID,JM) + WTHETA*WTHETA)
      VISCO=XCHORD*ROW2/REYNO
C
C USE SUTHERLANDS LAW INSTEAD
C
C ASSUME M=0.5
      TSTAT = TO1/(1+0.5*(GA-1)*0.5*0.5)
      TSREF=273.
      CSREF=110.
      VISCO = 1.716E-5 * (TSREF+CSREF)/(TSTAT+CSREF)*(TSTAT/TSREF)**1.5
c      WRITE(6,*) VISCO
C
C
C
   99 CONTINUE
C
      IF(NIT.GT.NLOS) GO TO 50
C
C      EVALUATE CONSTANT FACTORS NEEDED TO WORK OUT THE VISCOSITIES
C
      SUMF(1)=0.0
      SUMF(IM)=1.0
      SUM=0.0
      DO 4 I=2,IMM1
      SUM=SUM+F(I-1)
      SUMF(I)=SUM
      FPITCH=SUM*(1.-SUM)
      IF(FPITCH.GT.FRACPS) FPITCH=FRACPS
      DF=F(I)+F(I-1)
      FLAM(I)=F(I)/DF
      FTURB(I)=0.16*FPITCH*FPITCH/(DF*DF)
      FWAKE(I)=0.16*FRACPW*FRACPW/(DF*DF)
    4 CONTINUE
      DF=F(1)+F(IMM1)
      FLAM(1)=F(1)/DF
      FWAKE(1)=0.16*FRACPW*FRACPW/(DF*DF)
      FLAM(IM)=F(IMM1)/DF
      FWAKE(IM)=0.16*FRACPW*FRACPW/(DF*DF)
C
   50 CONTINUE
C
C      EVALUATE THE AVERAGE PROPERTIES ON THE FACES OF THE ELEMENTS.
C      THERE ARE NO VISCOUS STRESSES UPSTREAM OF THE LEADING EDGE.
C
C
      DO 100 J=JLEP1,JM
      DO 60 I=1,IM
      AREA(I)=SQRT(ATS(I,J)*ATS(I,J)+ATT(J)*ATT(J))
      VSAVG(I)=0.5*(VS(I,J)+VS(I,J-1))
      WTAVG(I)=0.5*(WT(I,J)+WT(I,J-1))
      ROAVG(I)=0.5*(RO(I,J)+RO(I,J-1))
      RAVG=0.50*(R(J-1)+R(J))
      VRELSQ=VSAVG(I)*VSAVG(I)+WTAVG(I)*WTAVG(I)
      RELV(I)=SQRT(VRELSQ)*VSAVG(I)/ABS(VSAVG(I))
   60 CONTINUE
C
C      EVALUATE THE SHEAR STRESS ON THE BLADE SURFACES.
C      USING THE LOG-LAW TO OBTAIN THE SKIN FRICTION FACTOR.
C      THE INPUT VARIABLE FWALL IS USED TO SCALE THE FRICTION FACTOR.
C
      IF(J.GT.JTE) GO TO 65
      DIST=PERP(1,J)
      RE=ROAVG(2)*ABS(RELV(2))*DIST/VISCO
      RELOG=1.0/ALOG(RE)
      CF=-0.001767 + 0.03177*RELOG + 0.25614*RELOG*RELOG
      IF(RE.LT.125.0) CF=2.0/RE
      CFSUCT(J)=FWALL*CF
      TW1=0.5*CF*FWALL*ROAVG(2)*RELV(2)*RELV(2)
      VPLUS=SQRT(TW1/ROAVG(1))
      YPLUSS(J)=VPLUS*ROAVG(1)*DIST/VISCO
      DIST=PERP(IMM1,J)
      RE=ROAVG(IMM1)*ABS(RELV(IMM1))*DIST/VISCO
      RELOG=1.0/ALOG(RE)
      CF=-0.001767 + 0.03177*RELOG + 0.25614*RELOG*RELOG
      IF(RE.LT.125.0) CF=2.0/RE
      CFPRES(J)=FWALL*CF
      TWM=0.5*CF*FWALL*ROAVG(IMM1)*RELV(IMM1)*RELV(IMM1)
      VPLUS=SQRT(TWM/ROAVG(IM))
      YPLUSP(J)=VPLUS*ROAVG(IM)*DIST/VISCO
      FMULT=TW1*AREA(1)/ABS(RELV(2))
      XSTRES(1)=FMULT*VSAVG(2)
      TSTRES(1)=FMULT*WTAVG(2)
      FMULT=-TWM*AREA(IM)/ABS(RELV(IMM1))
      XSTRES(IM)=FMULT*VSAVG(IMM1)
      TSTRES(IM)=FMULT*WTAVG(IMM1)
C
C      EVALUATE THE STRESSES ON THE BLADEWISE SURFACES WITHIN THE BLADE ROW.
C      FACTOR VTURB BY FTRAN TO ALLOW FOR SPECIFIED TRANSITION AT JTRANS,JTRANP.
C
      DO 55 I=2,IMM1
      FTRAN= (1.- (SUMF(I)/0.5)**4)*FTS(J)
      IF(I.GT.IMID) FTRAN = (1.-((1.-SUMF(I))/0.5)**4)*FTP(J)
      DPERP=PERP(I,J)
      VLAM(I)=FLAM(I)*VISCO/DPERP
      VTURB(I)=FTURB(I)*ROAVG(I)*ABS(RELV(I+1)-RELV(I-1))*FTRAN
   55 CONTINUE
C
C      FIND THE MAX TURBULENT VISCOSITY NEAR THE I=1 SURFACE
C
      RMAX=0.0
      IMAX=2
      DO 56 I=2,IMID
      RATVIS=VTURB(I)/VLAM(I)
      IF(RATVIS.LT.RMAX) GO TO 56
      RMAX=RATVIS
      IMAX=I
   56 CONTINUE
      RATS(J)=RMAX
      IF(RMAX.GT.FTRANS)  GO TO 71
      DO 72 I=2,IMID
   72 VTURB(I)=0.0
C
   71 CONTINUE
C
C      FIND THE MAX TURBULENT VISCOSITY NEAR THE I=IM SURFACE
C
      RMAX=0.0
      IMAX=IMM1
      DO 73 I=IMID,IMM1
      RATVIS=VTURB(I)/VLAM(I)
      IF(RATVIS.LT.RMAX) GO TO 73
      RMAX=RATVIS
      IMAX=I
   73 CONTINUE
      RATP(J)=RMAX
      IF(RMAX.GT.FTRANS) GO TO  77
      DO 74 I=IMID,IMM1
   74 VTURB(I)=0.0
C
   77 CONTINUE
C
C     FORM THE VISCOUS STRESSES IN THE STREAMWISE AND THETA DIRECTIONS
C
      DO 76 I=2,IMM1
      FMULT=(VLAM(I)+VTURB(I))*AREA(I)
      XSTRES(I)=FMULT*(VSAVG(I+1)-VSAVG(I-1))
      TSTRES(I)=FMULT*(WTAVG(I+1)-WTAVG(I-1))
   76 CONTINUE
C
      GO TO 75
C
C      FORM THE VISCOUS STRESSES ON THE BLADEWISE SURFACES BEHIND
C                       THE TRAILING EDGE
C
   65 CONTINUE
C
      DO 66 I=1,IM
      ISUB=I
      IF(I.EQ.IM) ISUB=IMM1
      IM1=I-1
      IP1=I+1
      IF(I.EQ.1) IM1=IMM1
      IF(I.EQ.IM) IP1=2
      DPERP=PERP(ISUB,J)
      VLAM(I)=FLAM(I)*VISCO/DPERP
      VTURB(I)=FWAKE(I)*ROAVG(I)*ABS(RELV(IP1)-RELV(IM1))*FTS(J)
      FMULT=AREA(I)*(VLAM(I)+VTURB(I))
      XSTRES(I)=FMULT*(VSAVG(IP1)-VSAVG(IM1))
      TSTRES(I)=FMULT*(WTAVG(IP1)-WTAVG(IM1))
   66 CONTINUE
      XSTRES(1)=0.5*(XSTRES(IM)+XSTRES(1))
      TSTRES(1)=0.5*(TSTRES(IM)+TSTRES(1))
      XSTRES(IM)=XSTRES(1)
      TSTRES(IM)=TSTRES(1)
C
   75 CONTINUE
C
C      CONVERT THE SHEAR STRESSES TO BODY FORCES FOR AXIAL AND MOMENT
C      OF MOMENTUM.
C
      DO 80 I=1,IMM1
      XFORCE(I,J)=XSTRES(I)-XSTRES(I+1)
      TFORCE(I,J)=(TSTRES(I)-TSTRES(I+1))*RAVG
   80 CONTINUE
  100 CONTINUE
      RETURN
      END
C
C****************************************************************************
C
      SUBROUTINE  CUSPIT(JTESUCT,JTEPRES,JCUSPEND,YS,YTHICK,X,CUSLEN,
     & RFCUSP,JM)
C
C     THIS SUBROUTINE FITS A CUSP TO THE BLADE TRAILING EDGE.
C     THE CUSP STARTS AT  'jtepres'  ON THE PRESSURE SURFACE AND AT
C     'jtesuct'  ON THE SUCTION SURFACE AND ENDS AT  'jcuspend'. THE
C     LENGTH OF THE CUSP IS cuslen * the blade trailing edge thickness.
C
      DIMENSION  X(150),YS(150),YTHICK(150),YP(150)
C
C
cc      READ(5,*) JC1,JC2,JCUSPEND,ICUSP,CUSLEN,RFCUSP
      CUSLEN=2.0
      RFCUSP=1.
      ICUSP=0
C
      IF(CUSLEN.LT.0.00001) CUSLEN = 2.0
      IF(RFCUSP.LT.0.00001) RFCUSP = 1.0
C
C     IF 'ICUSP' = 1 THEN THE CUSP STARTS ON THE I = IM SURFACE
C     IF 'ICUSP' > 1 IT STARTS ON THE  I =1  SURFACE
C     IF 'ICUSP' = 0 THEN THE CUSP STARTS AT THE SAME J POINT ON BOTH
C     SURFACES.
C
      JTEPRES = JC1
      JTESUCT = JC2
      IF(ICUSP.NE.1) THEN
      JTEPRES = JC2
      JTESUCT = JC1
      ENDIF
C
      DO 5 J=1,JM
   5  YP(J) = YS(J) - YTHICK(J)
C
C    FIND THE SURFACE SLOPES AT THE TRAILING EDGE
C
      M = 2
      DYSS = YS(JC1)  - YS(JC1-M)
      DYPS = YP(JC1)  - YP(JC1-M)
      DXPS  =  X(JC1)-X(JC1-M)
      DXSS  =  X(JC1)-X(JC1-M)
      TANALS = DYSS/DXSS
      TANALP = DYPS/DXPS
      TANAL = 0.5*(TANALS+TANALP)
      COSAL = 1./SQRT(1. + TANAL*TANAL)
      SINAL = SQRT(1.-COSAL*COSAL)
      TTANG = YTHICK(JC1)
      TPERP = TTANG*COSAL
      DXTE  = ABS(TPERP*SINAL)
C
C     FIT IN THE GRID POINTS IN THE REGION BETWEEN jtepres AND jtesuct
C
      IF(ICUSP.EQ.0) GO TO 15
C
      DO 10 J= JC1,JC2
      FAC   = FLOAT(J-JC1)/FLOAT(JC2-JC1)
      X(J)  = X(JC1)   + FAC*DXTE
      IF(ICUSP.EQ.1) THEN
      YS(J) = YS(JC1)  + TANALS*FAC*DXTE
      ELSE
      YP(J) = YP(JC1) + TANALP*FAC*DXTE
      ENDIF
   10 CONTINUE
C
   15 CONTINUE
C
C     LOCATE THE MID POINT OF THE TRAILING EDGE
C
      XMID = 0.5*(X(JC1)  + X(JC2))
      YMID = 0.5*(YP(JTEPRES) + YS(JTESUCT))
C
C     STORE THE OLD END OF THE CUSP
C
      XEND   =  X(JCUSPEND)
      YEND   = YS(JCUSPEND)
C
C     LOCATE THE NEW END OF THE CUSP
C
      DXCUSP = CUSLEN*TPERP*COSAL
      CUSLEN = DXCUSP
      X(JCUSPEND)  = XMID + DXCUSP
      XLIM = X(JC2) + 0.25*(X(JC2)-X(JC2-1))
      IF(X(JCUSPEND).LT.XLIM) X(JCUSPEND) = XLIM
      DXCUSP = X(JCUSPEND) - XMID
      YS(JCUSPEND) = YMID + TANAL*DXCUSP
      YP(JCUSPEND) = YS(JCUSPEND)
C
C     FIT POINTS FROM TRAILING EDGE TO CUSP END
C
      DXCUSP = X(JCUSPEND) - X(JC2)
      DO 50 J = JC2,JCUSPEND
      FAC = FLOAT(J-JC2)/FLOAT(JCUSPEND-JC2)
      X(J) = X(JC2) + FAC*DXCUSP
   50 CONTINUE
C
C     FIRST FROM SUCTION SIDE TO CUSP END
C
      IF(JCUSPEND.LE.JTESUCT) GO TO 21
      DO 20 J = JTESUCT,JCUSPEND
      FAC =   (X(J)-X(JTESUCT))/(X(JCUSPEND)-X(JTESUCT))
   20 YS(J) = YS(JTESUCT) + FAC*(YS(JCUSPEND)-YS(JTESUCT))
   21 CONTINUE
C
C     NEXT FIT POINTS FROM PRESSURE SIDE TE TO CUSP END
C
      IF(JCUSPEND.LE.JTEPRES) GO TO 31
      DO 30 J = JTEPRES,JCUSPEND
      FAC  = (X(J)-X(JTEPRES))/(X(JCUSPEND)-X(JTEPRES))
   30 YP(J) = YP(JTEPRES) + FAC*(YP(JCUSPEND)-YP(JTEPRES))
   31 CONTINUE
C
C      SHIFT THE POINTS DOWNSTREAM OF THE CUSP END
C
      XSHIFT = X(JCUSPEND) - XEND
      YSHIFT = YS(JCUSPEND)- YEND
C
      DO 40 J = JCUSPEND+1,JM
      X(J)   = X(J)  + XSHIFT
      YS(J)  = YS(J) + YSHIFT
      YP(J)  = YS(J)
   40 YTHICK(J) = 0.0
C
C     RESET THE TANGENTIAL THICKNESS EVERYWHERE.
C
      DO 60 J = 1,JM
  60  YTHICK(J) = YS(J)-YP(J)
      RETURN
      END
C
C*******************************************************************************
C
      SUBROUTINE CUSHIFT(CUSLEN,RFCUSP,JTESUCT,JTEPRES)
C
      COMMON/BLOCK1/SFLUX(50,150),TFLUX(50,150),IM,JLEP1,NIT,IMID,ISMTH,
     1 VOL(50,150),JM,JLE,JTE,JMM1,IMM1,SF,SFH,SF1,MARK,IBLOCK,JBLOCK
     &,NLOS,NBLADE,JLEM1,JTEP1,IBBLOCK,JBBLOCK,
     & IB(50),IBB(50),JB(150),JBB(150),JSB(150)
C
     2/BLOCK2/ VS(50,150),WT(50,150),P(50,150),RO(50,150),R(150),X(150)
     3 ,S(150),TH(50,150),RWT(50,150),TKSS(150),YSUCT(150),GS(50,150),CP
     4 ,GT(50,150),GA,GC,TO1,PO1,P2,FGA,W,RVTABS(50,150),VTABS(50,150)
     5 ,VVS(50,150),CFP(50,150)
C
      COMMON/BLKB/IPRINT(5),YTHICK(150),DTHETA(50,150),TKAVG(150),
     1 AS(50,150),ATT(150),ATS(50,150),ARS(50,150),DS(150),
     2 PEFF(50,150),ROVS(50,150),ROWT(50,150),RORWT(50,150),
     3 PSS(150),PST(150),SSS(150),SST(150),CORIOF(50,150),CENTF(50,150),
     4 F(50),RR(150),PIN(50),ATC(50,150),DSAVG(150),IND(150)
     5  ,GAP(150),TOREL(50),POLOS(50),FLOW(150),ITITLE(18),PERP(50,150)
C
C      FIND THE AVERAGE PRESSURES ON THE FACES OF THE CUSP
C
      PAVGS = 0.0
      PAVGP = 0.0
      SUM = 0.0
      DO 191  J = JTESUCT,JTE-1
      SUM   = SUM + ATT(J)
 191  PAVGS = PAVGS + ATT(J)*0.5*(PEFF(1,J)+PEFF(1,J+1))
      PAVGS = PAVGS/SUM
      SUM   = 0.0
      DO 192 J = JTEPRES,JTE-1
      SUM   = SUM + ATT(J)
  192 PAVGP = PAVGP + ATT(J)*0.5*(PEFF(IM,J)+PEFF(IM,J+1))
      PAVGP = PAVGP/SUM
C
C     SHIFT THE POINTS ON THE CUSP
C
      DIFFP = (PAVGP-PAVGS)/(PO1 - P2)
      WRITE(6,500) DIFFP
  500 FORMAT( ' SHIFTING CUSP, NON-DIMENSIONAL PRESSURE DIFFERENCE= ',
     & F10.5)
      SHIFT = RFCUSP*CUSLEN*DIFFP
      DO 193 J = JTESUCT+1,JTE
      YSHIFT  = SHIFT*(X(J)-X(JTESUCT))/(X(JTE)-X(JTESUCT))
      TH(1,J) = TH(1,J) + YSHIFT/R(J)
  193 CONTINUE
      DO 194  J = JTEPRES+1,JTE
      YSHIFT   = SHIFT*(X(J)-X(JTEPRES))/(X(JTE)-X(JTEPRES))
  194 TH(IM,J) = TH(IM,J) + YSHIFT/R(J)
C
C     SHIFT THE GRID BEHIND THE TRAILING EDGE
C
      DO 195 J = JTE+1,JM
      TH(1,J)  = TH(1,J)  + SHIFT/R(J)
      TH(IM,J) = TH(IM,J) + SHIFT/R(J)
  195 CONTINUE
C
C     SET THETA AND DTHETA FOR THE MOVED GRID POINTS
C
      JSTART = JTESUCT
      IF(JTEPRES.LT.JTESUCT) JSTART = JTEPRES
      DO 196 J = JSTART,JM
      TPITCH = TH(IM,J)-TH(1,J)
      DO 196 I = 1,IMM1
      TH(I+1,J) = TH(I,J) + F(I)*TPITCH
      DTHETA(I,J) = TPITCH*F(I)
  196 CONTINUE
C
C      RECALCULATE THE AREAS OF THE FACES OF THE ELEMENTS
C
      DO 13 J=1,JM
      JM1=J-1
      IF(J.EQ.1) JM1=1
      DO 14 I=1,IM
      ATT(J)=TKAVG(J)*DS(J)
      THMID=0.5*(TH(I,J)+TH(I,JM1))
   14 ATS(I,J)=TKAVG(J)*(R(J)*(TH(I,J)-THMID)-R(JM1)*(TH(I,JM1)-THMID))
      DO 17 I=1,IMM1
      AS(I,J)=TKSS(J)*R(J)*(TH(I+1,J)-TH(I,J))
      VOL(I,J)=1./(ATT(J)*0.5*(R(J)*DTHETA(I,J)+R(JM1)*DTHETA(I,JM1)))
   17 CONTINUE
   13 CONTINUE
      DO 15 I=1,IMM1
      DO 15 J=2,JMM1
      ARS(I,J)=(R(J)*DTHETA(I,J)+R(J-1)*DTHETA(I,J-1))*0.5
     1  *(TKSS(J)-TKSS(J-1))
   15 ATC(I,J)=AS(I,J)-AS(I,J-1)+ATS(I,J)-ATS(I+1,J)-ARS(I,J)
      DO 16 I=1,IM
      ATC(I,1)=ATC(I,2)
      ATS(I,1)=ATS(I,2)
      ATC(I,JM)=ATC(I,JMM1)
      ARS(I,1)=ARS(I,2)
      ARS(I,JM)=ARS(I,JMM1)
   16 TH(I,JM+1)= 2.0*TH(I,JM)-TH(I,JMM1)
C
C       GEOMETRY OUTPUT FOR PLOTTING FILE
C
C      TFLUX(I,J) IS USED TO STORE R*THETA
C
      DO 999 I=1,IM
      DO 999 J=1,JM
  999 TFLUX(I,J) = R(J) * TH(I,J)
C
      JSPS=0
      JSPE=0
      ISPLIT=0
      JSPLIT=0
      KM=1
cc      REWIND 7
cc      WRITE (7,201) (ITITLE(L),L=1,18)
cc      WRITE(7,7000) IM,JM,KM,ISPLIT,JSPLIT,JLE,JTE,JSPS,JSPE
c      WRITE(7,7001) CP,GA,W
      DO 129 J=1,JM
      PITCH=2.*3.14159*R(J)/NBLADE
c      WRITE(7,7001) X(J),R(J),S(J),PITCH,(TFLUX(I,J),I=1,IM)
  129 CONTINUE
 7000 FORMAT(16I5)
  201 FORMAT(18A4)
 7001 FORMAT(4F10.4/(10F10.5))
C
C
      RETURN
      END
